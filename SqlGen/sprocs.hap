load "mscorlib";
load "Microsoft.SqlServer.Smo, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91";

def Environment = System.Environment;
def DateTime = System.DateTime;
def Char = System.Char;
def Console = System.Console;
def SqlDataType = Microsoft.SqlServer.Management.Smo.SqlDataType;

def lengthDataTypes;

def stars = "--*****************************************************************************";

function w_GenerateSprocs(database) 
{
	init();
~<|
$stars$
--This code was generated by a tool.
--Don't modify it by hand.
--Database:  $database.Name$
--Host:  $Environment.MachineName$
--Date:  $DateTime.Now$
--Tables:
|% for(t in database.Tables between ",\n") { ~"--\t" t.Name; } %|
$stars$
|>;

	def sprocName, parameters, body;
	for(table in database.Tables between "\n\n")
	{
		Console.WriteLine("Generating stored procedures for table " + table.Name);

~<|
$stars$
--	Stored procedures for [$table.Schema$].[$table.Name$]
$stars$
|% w_listSproc(table); %|
GO
$stars$
|% w_insertSproc(table); %|
GO
$stars$
|% w_updateSproc(table); %|
GO
|>;
	}
}
/*end GenerateSprocs*/


function w_listSproc(table)
{
	w_dropCreateProcedure(<|[$table.Schema$].[$table.Name$_List]|>);
~<|AS
	SELECT
		|% for(column in table.Columns between ",\n\t\t")  ~<|[$column.Name$]|>; %|
	FROM [$table.Schema$].[$table.Name$]
|>;
}


function w_insertSproc(table)
{
	w_dropCreateProcedure(<|[$table.Schema$].[$table.Name$_Insert]|>);
~<|(
	|% 
		for(column in table.Columns where !column.Identity between ",\n\t" ) 
			if(column.Identity == false)
				w_parameterDef(column); 
	%|
)
AS
	SET NOCOUNT ON
	INSERT INTO $tableName(table)$
	(
		|% 
			for(column in table.Columns where !column.Identity && !column.Computed between ",\n\t\t")  
				~<|[$column.Name$]|>; 
		%|
	)
	VALUES
	(
		|% 
			for(column in table.Columns where !column.Identity && !column.Computed between ",\n\t\t" )
				w_parameterName(column);
		%|
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity
|>;
}

function tableHasPrimaryKey(table)
{
	for(column in table.Columns where column.InPrimaryKey)
		return true;

	return false;
}

function w_updateSproc(table)
{
	if(!tableHasPrimaryKey(table))
	{
		Console.WriteLine("Warning:  table '" + table.Name + "' does have a primary key, skipping update sproc...");
		return;
	}

	w_dropCreateProcedure(<|[$table.Schema$].[$table.Name$_Update]|>);
~<|(
	|% 
		for(column in table.Columns between ",\n\t")
			w_parameterDef(column);
	%|
)
AS
	SET NOCOUNT ON
	UPDATE $tableName(table)$ SET
		|% 
			for(column in table.Columns where !column.Identity && !column.Computed between ",\n\t\t" ) 
			{
				~<|[$column.Name$] = $parameterName(column)$|>; 
			}
		%|
	WHERE
		|% 
			for(column in table.Columns where column.InPrimaryKey between " AND\n\t\t" ) 
				~<|[$column.Name$] = $parameterName(column)$|>; 
		%|
|>;			
}

function w_dropCreateProcedure(sprocName) 
~<| 
IF OBJECT_ID('$sprocName$') IS NOT NULL DROP PROCEDURE $sprocName$
GO
CREATE PROCEDURE $sprocName$
|>;


function w_parameterName(column) 
	~parameterName(column);

function parameterName(column)
	return "@" + sanitizename(column.Name);

function w_parameterDef(column)
{
	w_parameterName(column);
	~" ";

	def typeName = column.DataType.Name.ToUpper();

	/* For some reason, column.Data.Type.Name is not present for XML columns.*/
	if(column.DataType.SqlDataType == SqlDataType.Xml)
		~"XML";
	else
		~typeName;

	if(lengthDataTypes.Contains(typeName))
	{
		~"("; 
		if(column.DataType.MaximumLength == -1)
			~"MAX"; 
		else
			~column.DataType.MaximumLength;
		~")";
	}
}/*end parameterDef*/

function tableName(table)
{
	return <|[$table.Schema$].[$table.Name$]|>;
}

function sanitizeName(name)
{
	def sb = new(System.Text.StringBuilder);
	for(c in name)
		if(Char.IsLetterOrDigit(c))
			sb.Append(c);
		else
			sb.Append("_");

	return sb.ToString();
}

function init()
{
	if(lengthDataTypes == null)
	{
		lengthDataTypes = new(System.Collections.ArrayList);
		lengthDataTypes.Add("CHAR");
		lengthDataTypes.Add("NCHAR");
		lengthDataTypes.Add("VARCHAR");
		lengthDataTypes.Add("NVARCHAR");
		lengthDataTypes.Add("BINARY");
		lengthDataTypes.Add("VARBINARY");
	}
}
