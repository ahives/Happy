
--*****************************************************************************
--This code was generated by a tool.
--Don't modify it by hand.
--Database:  AdventureWorks
--Host:  MONSTER
--Date:  3/12/2011 12:43:20 PM
--Tables:
--	AWBuildVersion,
--	DatabaseLog,
--	ErrorLog,
--	Department,
--	Employee,
--	EmployeeAddress,
--	EmployeeDepartmentHistory,
--	EmployeePayHistory,
--	JobCandidate,
--	Shift,
--	Address,
--	AddressType,
--	Contact,
--	ContactType,
--	CountryRegion,
--	StateProvince,
--	BillOfMaterials,
--	Culture,
--	Document,
--	Illustration,
--	Location,
--	Product,
--	ProductCategory,
--	ProductCostHistory,
--	ProductDescription,
--	ProductDocument,
--	ProductInventory,
--	ProductListPriceHistory,
--	ProductModel,
--	ProductModelIllustration,
--	ProductModelProductDescriptionCulture,
--	ProductPhoto,
--	ProductProductPhoto,
--	ProductReview,
--	ProductSubcategory,
--	ScrapReason,
--	TransactionHistory,
--	TransactionHistoryArchive,
--	UnitMeasure,
--	WorkOrder,
--	WorkOrderRouting,
--	ProductVendor,
--	PurchaseOrderDetail,
--	PurchaseOrderHeader,
--	ShipMethod,
--	Vendor,
--	VendorAddress,
--	VendorContact,
--	ContactCreditCard,
--	CountryRegionCurrency,
--	CreditCard,
--	Currency,
--	CurrencyRate,
--	Customer,
--	CustomerAddress,
--	Individual,
--	SalesOrderDetail,
--	SalesOrderHeader,
--	SalesOrderHeaderSalesReason,
--	SalesPerson,
--	SalesPersonQuotaHistory,
--	SalesReason,
--	SalesTaxRate,
--	SalesTerritory,
--	SalesTerritoryHistory,
--	ShoppingCartItem,
--	SpecialOffer,
--	SpecialOfferProduct,
--	Store,
--	StoreContact
--*****************************************************************************

--*****************************************************************************
--	Stored procedures for [dbo].[AWBuildVersion]
--*****************************************************************************
 
IF OBJECT_ID('[dbo].[AWBuildVersion_List]') IS NOT NULL DROP PROCEDURE [dbo].[AWBuildVersion_List]
GO
CREATE PROCEDURE [dbo].[AWBuildVersion_List]
AS
	SELECT
		[SystemInformationID],
		[Database Version],
		[VersionDate],
		[ModifiedDate]
	FROM [dbo].[AWBuildVersion]

GO
--*****************************************************************************
 
IF OBJECT_ID('[dbo].[AWBuildVersion_Insert]') IS NOT NULL DROP PROCEDURE [dbo].[AWBuildVersion_Insert]
GO
CREATE PROCEDURE [dbo].[AWBuildVersion_Insert]
(
	@Database_Version NVARCHAR(25),
	@VersionDate DATETIME,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [dbo].[AWBuildVersion]
	(
		[Database Version],
		[VersionDate],
		[ModifiedDate]
	)
	VALUES
	(
		@Database_Version,
		@VersionDate,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[dbo].[AWBuildVersion_Update]') IS NOT NULL DROP PROCEDURE [dbo].[AWBuildVersion_Update]
GO
CREATE PROCEDURE [dbo].[AWBuildVersion_Update]
(
	@SystemInformationID TINYINT,
	@Database_Version NVARCHAR(25),
	@VersionDate DATETIME,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [dbo].[AWBuildVersion] SET
		[Database Version] = @Database_Version,
		[VersionDate] = @VersionDate,
		[ModifiedDate] = @ModifiedDate
	WHERE
		SystemInformationID = @SystemInformationID

GO



--*****************************************************************************
--	Stored procedures for [dbo].[DatabaseLog]
--*****************************************************************************
 
IF OBJECT_ID('[dbo].[DatabaseLog_List]') IS NOT NULL DROP PROCEDURE [dbo].[DatabaseLog_List]
GO
CREATE PROCEDURE [dbo].[DatabaseLog_List]
AS
	SELECT
		[DatabaseLogID],
		[PostTime],
		[DatabaseUser],
		[Event],
		[Schema],
		[Object],
		[TSQL],
		[XmlEvent]
	FROM [dbo].[DatabaseLog]

GO
--*****************************************************************************
 
IF OBJECT_ID('[dbo].[DatabaseLog_Insert]') IS NOT NULL DROP PROCEDURE [dbo].[DatabaseLog_Insert]
GO
CREATE PROCEDURE [dbo].[DatabaseLog_Insert]
(
	@PostTime DATETIME,
	@DatabaseUser SYSNAME,
	@Event SYSNAME,
	@Schema SYSNAME,
	@Object SYSNAME,
	@TSQL NVARCHAR(MAX),
	@XmlEvent XML
)
AS
	SET NOCOUNT ON
	INSERT INTO [dbo].[DatabaseLog]
	(
		[PostTime],
		[DatabaseUser],
		[Event],
		[Schema],
		[Object],
		[TSQL],
		[XmlEvent]
	)
	VALUES
	(
		@PostTime,
		@DatabaseUser,
		@Event,
		@Schema,
		@Object,
		@TSQL,
		@XmlEvent
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[dbo].[DatabaseLog_Update]') IS NOT NULL DROP PROCEDURE [dbo].[DatabaseLog_Update]
GO
CREATE PROCEDURE [dbo].[DatabaseLog_Update]
(
	@DatabaseLogID INT,
	@PostTime DATETIME,
	@DatabaseUser SYSNAME,
	@Event SYSNAME,
	@Schema SYSNAME,
	@Object SYSNAME,
	@TSQL NVARCHAR(MAX),
	@XmlEvent XML
)
AS
	SET NOCOUNT ON
	UPDATE [dbo].[DatabaseLog] SET
		[PostTime] = @PostTime,
		[DatabaseUser] = @DatabaseUser,
		[Event] = @Event,
		[Schema] = @Schema,
		[Object] = @Object,
		[TSQL] = @TSQL,
		[XmlEvent] = @XmlEvent
	WHERE
		DatabaseLogID = @DatabaseLogID

GO



--*****************************************************************************
--	Stored procedures for [dbo].[ErrorLog]
--*****************************************************************************
 
IF OBJECT_ID('[dbo].[ErrorLog_List]') IS NOT NULL DROP PROCEDURE [dbo].[ErrorLog_List]
GO
CREATE PROCEDURE [dbo].[ErrorLog_List]
AS
	SELECT
		[ErrorLogID],
		[ErrorTime],
		[UserName],
		[ErrorNumber],
		[ErrorSeverity],
		[ErrorState],
		[ErrorProcedure],
		[ErrorLine],
		[ErrorMessage]
	FROM [dbo].[ErrorLog]

GO
--*****************************************************************************
 
IF OBJECT_ID('[dbo].[ErrorLog_Insert]') IS NOT NULL DROP PROCEDURE [dbo].[ErrorLog_Insert]
GO
CREATE PROCEDURE [dbo].[ErrorLog_Insert]
(
	@ErrorTime DATETIME,
	@UserName SYSNAME,
	@ErrorNumber INT,
	@ErrorSeverity INT,
	@ErrorState INT,
	@ErrorProcedure NVARCHAR(126),
	@ErrorLine INT,
	@ErrorMessage NVARCHAR(4000)
)
AS
	SET NOCOUNT ON
	INSERT INTO [dbo].[ErrorLog]
	(
		[ErrorTime],
		[UserName],
		[ErrorNumber],
		[ErrorSeverity],
		[ErrorState],
		[ErrorProcedure],
		[ErrorLine],
		[ErrorMessage]
	)
	VALUES
	(
		@ErrorTime,
		@UserName,
		@ErrorNumber,
		@ErrorSeverity,
		@ErrorState,
		@ErrorProcedure,
		@ErrorLine,
		@ErrorMessage
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[dbo].[ErrorLog_Update]') IS NOT NULL DROP PROCEDURE [dbo].[ErrorLog_Update]
GO
CREATE PROCEDURE [dbo].[ErrorLog_Update]
(
	@ErrorLogID INT,
	@ErrorTime DATETIME,
	@UserName SYSNAME,
	@ErrorNumber INT,
	@ErrorSeverity INT,
	@ErrorState INT,
	@ErrorProcedure NVARCHAR(126),
	@ErrorLine INT,
	@ErrorMessage NVARCHAR(4000)
)
AS
	SET NOCOUNT ON
	UPDATE [dbo].[ErrorLog] SET
		[ErrorTime] = @ErrorTime,
		[UserName] = @UserName,
		[ErrorNumber] = @ErrorNumber,
		[ErrorSeverity] = @ErrorSeverity,
		[ErrorState] = @ErrorState,
		[ErrorProcedure] = @ErrorProcedure,
		[ErrorLine] = @ErrorLine,
		[ErrorMessage] = @ErrorMessage
	WHERE
		ErrorLogID = @ErrorLogID

GO



--*****************************************************************************
--	Stored procedures for [HumanResources].[Department]
--*****************************************************************************
 
IF OBJECT_ID('[HumanResources].[Department_List]') IS NOT NULL DROP PROCEDURE [HumanResources].[Department_List]
GO
CREATE PROCEDURE [HumanResources].[Department_List]
AS
	SELECT
		[DepartmentID],
		[Name],
		[GroupName],
		[ModifiedDate]
	FROM [HumanResources].[Department]

GO
--*****************************************************************************
 
IF OBJECT_ID('[HumanResources].[Department_Insert]') IS NOT NULL DROP PROCEDURE [HumanResources].[Department_Insert]
GO
CREATE PROCEDURE [HumanResources].[Department_Insert]
(
	@Name NAME,
	@GroupName NAME,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [HumanResources].[Department]
	(
		[Name],
		[GroupName],
		[ModifiedDate]
	)
	VALUES
	(
		@Name,
		@GroupName,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[HumanResources].[Department_Update]') IS NOT NULL DROP PROCEDURE [HumanResources].[Department_Update]
GO
CREATE PROCEDURE [HumanResources].[Department_Update]
(
	@DepartmentID SMALLINT,
	@Name NAME,
	@GroupName NAME,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [HumanResources].[Department] SET
		[Name] = @Name,
		[GroupName] = @GroupName,
		[ModifiedDate] = @ModifiedDate
	WHERE
		DepartmentID = @DepartmentID

GO



--*****************************************************************************
--	Stored procedures for [HumanResources].[Employee]
--*****************************************************************************
 
IF OBJECT_ID('[HumanResources].[Employee_List]') IS NOT NULL DROP PROCEDURE [HumanResources].[Employee_List]
GO
CREATE PROCEDURE [HumanResources].[Employee_List]
AS
	SELECT
		[EmployeeID],
		[NationalIDNumber],
		[ContactID],
		[LoginID],
		[ManagerID],
		[Title],
		[BirthDate],
		[MaritalStatus],
		[Gender],
		[HireDate],
		[SalariedFlag],
		[VacationHours],
		[SickLeaveHours],
		[CurrentFlag],
		[rowguid],
		[ModifiedDate]
	FROM [HumanResources].[Employee]

GO
--*****************************************************************************
 
IF OBJECT_ID('[HumanResources].[Employee_Insert]') IS NOT NULL DROP PROCEDURE [HumanResources].[Employee_Insert]
GO
CREATE PROCEDURE [HumanResources].[Employee_Insert]
(
	@NationalIDNumber NVARCHAR(15),
	@ContactID INT,
	@LoginID NVARCHAR(256),
	@ManagerID INT,
	@Title NVARCHAR(50),
	@BirthDate DATETIME,
	@MaritalStatus NCHAR(1),
	@Gender NCHAR(1),
	@HireDate DATETIME,
	@SalariedFlag FLAG,
	@VacationHours SMALLINT,
	@SickLeaveHours SMALLINT,
	@CurrentFlag FLAG,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [HumanResources].[Employee]
	(
		[NationalIDNumber],
		[ContactID],
		[LoginID],
		[ManagerID],
		[Title],
		[BirthDate],
		[MaritalStatus],
		[Gender],
		[HireDate],
		[SalariedFlag],
		[VacationHours],
		[SickLeaveHours],
		[CurrentFlag],
		[rowguid],
		[ModifiedDate]
	)
	VALUES
	(
		@NationalIDNumber,
		@ContactID,
		@LoginID,
		@ManagerID,
		@Title,
		@BirthDate,
		@MaritalStatus,
		@Gender,
		@HireDate,
		@SalariedFlag,
		@VacationHours,
		@SickLeaveHours,
		@CurrentFlag,
		@rowguid,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[HumanResources].[Employee_Update]') IS NOT NULL DROP PROCEDURE [HumanResources].[Employee_Update]
GO
CREATE PROCEDURE [HumanResources].[Employee_Update]
(
	@EmployeeID INT,
	@NationalIDNumber NVARCHAR(15),
	@ContactID INT,
	@LoginID NVARCHAR(256),
	@ManagerID INT,
	@Title NVARCHAR(50),
	@BirthDate DATETIME,
	@MaritalStatus NCHAR(1),
	@Gender NCHAR(1),
	@HireDate DATETIME,
	@SalariedFlag FLAG,
	@VacationHours SMALLINT,
	@SickLeaveHours SMALLINT,
	@CurrentFlag FLAG,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [HumanResources].[Employee] SET
		[NationalIDNumber] = @NationalIDNumber,
		[ContactID] = @ContactID,
		[LoginID] = @LoginID,
		[ManagerID] = @ManagerID,
		[Title] = @Title,
		[BirthDate] = @BirthDate,
		[MaritalStatus] = @MaritalStatus,
		[Gender] = @Gender,
		[HireDate] = @HireDate,
		[SalariedFlag] = @SalariedFlag,
		[VacationHours] = @VacationHours,
		[SickLeaveHours] = @SickLeaveHours,
		[CurrentFlag] = @CurrentFlag,
		[rowguid] = @rowguid,
		[ModifiedDate] = @ModifiedDate
	WHERE
		EmployeeID = @EmployeeID

GO



--*****************************************************************************
--	Stored procedures for [HumanResources].[EmployeeAddress]
--*****************************************************************************
 
IF OBJECT_ID('[HumanResources].[EmployeeAddress_List]') IS NOT NULL DROP PROCEDURE [HumanResources].[EmployeeAddress_List]
GO
CREATE PROCEDURE [HumanResources].[EmployeeAddress_List]
AS
	SELECT
		[EmployeeID],
		[AddressID],
		[rowguid],
		[ModifiedDate]
	FROM [HumanResources].[EmployeeAddress]

GO
--*****************************************************************************
 
IF OBJECT_ID('[HumanResources].[EmployeeAddress_Insert]') IS NOT NULL DROP PROCEDURE [HumanResources].[EmployeeAddress_Insert]
GO
CREATE PROCEDURE [HumanResources].[EmployeeAddress_Insert]
(
	@EmployeeID INT,
	@AddressID INT,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [HumanResources].[EmployeeAddress]
	(
		[EmployeeID],
		[AddressID],
		[rowguid],
		[ModifiedDate]
	)
	VALUES
	(
		@EmployeeID,
		@AddressID,
		@rowguid,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[HumanResources].[EmployeeAddress_Update]') IS NOT NULL DROP PROCEDURE [HumanResources].[EmployeeAddress_Update]
GO
CREATE PROCEDURE [HumanResources].[EmployeeAddress_Update]
(
	@EmployeeID INT,
	@AddressID INT,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [HumanResources].[EmployeeAddress] SET
		[EmployeeID] = @EmployeeID,
		[AddressID] = @AddressID,
		[rowguid] = @rowguid,
		[ModifiedDate] = @ModifiedDate
	WHERE
		EmployeeID = @EmployeeID AND
		AddressID = @AddressID

GO



--*****************************************************************************
--	Stored procedures for [HumanResources].[EmployeeDepartmentHistory]
--*****************************************************************************
 
IF OBJECT_ID('[HumanResources].[EmployeeDepartmentHistory_List]') IS NOT NULL DROP PROCEDURE [HumanResources].[EmployeeDepartmentHistory_List]
GO
CREATE PROCEDURE [HumanResources].[EmployeeDepartmentHistory_List]
AS
	SELECT
		[EmployeeID],
		[DepartmentID],
		[ShiftID],
		[StartDate],
		[EndDate],
		[ModifiedDate]
	FROM [HumanResources].[EmployeeDepartmentHistory]

GO
--*****************************************************************************
 
IF OBJECT_ID('[HumanResources].[EmployeeDepartmentHistory_Insert]') IS NOT NULL DROP PROCEDURE [HumanResources].[EmployeeDepartmentHistory_Insert]
GO
CREATE PROCEDURE [HumanResources].[EmployeeDepartmentHistory_Insert]
(
	@EmployeeID INT,
	@DepartmentID SMALLINT,
	@ShiftID TINYINT,
	@StartDate DATETIME,
	@EndDate DATETIME,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [HumanResources].[EmployeeDepartmentHistory]
	(
		[EmployeeID],
		[DepartmentID],
		[ShiftID],
		[StartDate],
		[EndDate],
		[ModifiedDate]
	)
	VALUES
	(
		@EmployeeID,
		@DepartmentID,
		@ShiftID,
		@StartDate,
		@EndDate,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[HumanResources].[EmployeeDepartmentHistory_Update]') IS NOT NULL DROP PROCEDURE [HumanResources].[EmployeeDepartmentHistory_Update]
GO
CREATE PROCEDURE [HumanResources].[EmployeeDepartmentHistory_Update]
(
	@EmployeeID INT,
	@DepartmentID SMALLINT,
	@ShiftID TINYINT,
	@StartDate DATETIME,
	@EndDate DATETIME,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [HumanResources].[EmployeeDepartmentHistory] SET
		[EmployeeID] = @EmployeeID,
		[DepartmentID] = @DepartmentID,
		[ShiftID] = @ShiftID,
		[StartDate] = @StartDate,
		[EndDate] = @EndDate,
		[ModifiedDate] = @ModifiedDate
	WHERE
		EmployeeID = @EmployeeID AND
		DepartmentID = @DepartmentID AND
		ShiftID = @ShiftID AND
		StartDate = @StartDate

GO



--*****************************************************************************
--	Stored procedures for [HumanResources].[EmployeePayHistory]
--*****************************************************************************
 
IF OBJECT_ID('[HumanResources].[EmployeePayHistory_List]') IS NOT NULL DROP PROCEDURE [HumanResources].[EmployeePayHistory_List]
GO
CREATE PROCEDURE [HumanResources].[EmployeePayHistory_List]
AS
	SELECT
		[EmployeeID],
		[RateChangeDate],
		[Rate],
		[PayFrequency],
		[ModifiedDate]
	FROM [HumanResources].[EmployeePayHistory]

GO
--*****************************************************************************
 
IF OBJECT_ID('[HumanResources].[EmployeePayHistory_Insert]') IS NOT NULL DROP PROCEDURE [HumanResources].[EmployeePayHistory_Insert]
GO
CREATE PROCEDURE [HumanResources].[EmployeePayHistory_Insert]
(
	@EmployeeID INT,
	@RateChangeDate DATETIME,
	@Rate MONEY,
	@PayFrequency TINYINT,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [HumanResources].[EmployeePayHistory]
	(
		[EmployeeID],
		[RateChangeDate],
		[Rate],
		[PayFrequency],
		[ModifiedDate]
	)
	VALUES
	(
		@EmployeeID,
		@RateChangeDate,
		@Rate,
		@PayFrequency,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[HumanResources].[EmployeePayHistory_Update]') IS NOT NULL DROP PROCEDURE [HumanResources].[EmployeePayHistory_Update]
GO
CREATE PROCEDURE [HumanResources].[EmployeePayHistory_Update]
(
	@EmployeeID INT,
	@RateChangeDate DATETIME,
	@Rate MONEY,
	@PayFrequency TINYINT,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [HumanResources].[EmployeePayHistory] SET
		[EmployeeID] = @EmployeeID,
		[RateChangeDate] = @RateChangeDate,
		[Rate] = @Rate,
		[PayFrequency] = @PayFrequency,
		[ModifiedDate] = @ModifiedDate
	WHERE
		EmployeeID = @EmployeeID AND
		RateChangeDate = @RateChangeDate

GO



--*****************************************************************************
--	Stored procedures for [HumanResources].[JobCandidate]
--*****************************************************************************
 
IF OBJECT_ID('[HumanResources].[JobCandidate_List]') IS NOT NULL DROP PROCEDURE [HumanResources].[JobCandidate_List]
GO
CREATE PROCEDURE [HumanResources].[JobCandidate_List]
AS
	SELECT
		[JobCandidateID],
		[EmployeeID],
		[Resume],
		[ModifiedDate]
	FROM [HumanResources].[JobCandidate]

GO
--*****************************************************************************
 
IF OBJECT_ID('[HumanResources].[JobCandidate_Insert]') IS NOT NULL DROP PROCEDURE [HumanResources].[JobCandidate_Insert]
GO
CREATE PROCEDURE [HumanResources].[JobCandidate_Insert]
(
	@EmployeeID INT,
	@Resume XML,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [HumanResources].[JobCandidate]
	(
		[EmployeeID],
		[Resume],
		[ModifiedDate]
	)
	VALUES
	(
		@EmployeeID,
		@Resume,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[HumanResources].[JobCandidate_Update]') IS NOT NULL DROP PROCEDURE [HumanResources].[JobCandidate_Update]
GO
CREATE PROCEDURE [HumanResources].[JobCandidate_Update]
(
	@JobCandidateID INT,
	@EmployeeID INT,
	@Resume XML,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [HumanResources].[JobCandidate] SET
		[EmployeeID] = @EmployeeID,
		[Resume] = @Resume,
		[ModifiedDate] = @ModifiedDate
	WHERE
		JobCandidateID = @JobCandidateID

GO



--*****************************************************************************
--	Stored procedures for [HumanResources].[Shift]
--*****************************************************************************
 
IF OBJECT_ID('[HumanResources].[Shift_List]') IS NOT NULL DROP PROCEDURE [HumanResources].[Shift_List]
GO
CREATE PROCEDURE [HumanResources].[Shift_List]
AS
	SELECT
		[ShiftID],
		[Name],
		[StartTime],
		[EndTime],
		[ModifiedDate]
	FROM [HumanResources].[Shift]

GO
--*****************************************************************************
 
IF OBJECT_ID('[HumanResources].[Shift_Insert]') IS NOT NULL DROP PROCEDURE [HumanResources].[Shift_Insert]
GO
CREATE PROCEDURE [HumanResources].[Shift_Insert]
(
	@Name NAME,
	@StartTime DATETIME,
	@EndTime DATETIME,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [HumanResources].[Shift]
	(
		[Name],
		[StartTime],
		[EndTime],
		[ModifiedDate]
	)
	VALUES
	(
		@Name,
		@StartTime,
		@EndTime,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[HumanResources].[Shift_Update]') IS NOT NULL DROP PROCEDURE [HumanResources].[Shift_Update]
GO
CREATE PROCEDURE [HumanResources].[Shift_Update]
(
	@ShiftID TINYINT,
	@Name NAME,
	@StartTime DATETIME,
	@EndTime DATETIME,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [HumanResources].[Shift] SET
		[Name] = @Name,
		[StartTime] = @StartTime,
		[EndTime] = @EndTime,
		[ModifiedDate] = @ModifiedDate
	WHERE
		ShiftID = @ShiftID

GO



--*****************************************************************************
--	Stored procedures for [Person].[Address]
--*****************************************************************************
 
IF OBJECT_ID('[Person].[Address_List]') IS NOT NULL DROP PROCEDURE [Person].[Address_List]
GO
CREATE PROCEDURE [Person].[Address_List]
AS
	SELECT
		[AddressID],
		[AddressLine1],
		[AddressLine2],
		[City],
		[StateProvinceID],
		[PostalCode],
		[rowguid],
		[ModifiedDate]
	FROM [Person].[Address]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Person].[Address_Insert]') IS NOT NULL DROP PROCEDURE [Person].[Address_Insert]
GO
CREATE PROCEDURE [Person].[Address_Insert]
(
	@AddressLine1 NVARCHAR(60),
	@AddressLine2 NVARCHAR(60),
	@City NVARCHAR(30),
	@StateProvinceID INT,
	@PostalCode NVARCHAR(15),
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Person].[Address]
	(
		[AddressLine1],
		[AddressLine2],
		[City],
		[StateProvinceID],
		[PostalCode],
		[rowguid],
		[ModifiedDate]
	)
	VALUES
	(
		@AddressLine1,
		@AddressLine2,
		@City,
		@StateProvinceID,
		@PostalCode,
		@rowguid,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Person].[Address_Update]') IS NOT NULL DROP PROCEDURE [Person].[Address_Update]
GO
CREATE PROCEDURE [Person].[Address_Update]
(
	@AddressID INT,
	@AddressLine1 NVARCHAR(60),
	@AddressLine2 NVARCHAR(60),
	@City NVARCHAR(30),
	@StateProvinceID INT,
	@PostalCode NVARCHAR(15),
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Person].[Address] SET
		[AddressLine1] = @AddressLine1,
		[AddressLine2] = @AddressLine2,
		[City] = @City,
		[StateProvinceID] = @StateProvinceID,
		[PostalCode] = @PostalCode,
		[rowguid] = @rowguid,
		[ModifiedDate] = @ModifiedDate
	WHERE
		AddressID = @AddressID

GO



--*****************************************************************************
--	Stored procedures for [Person].[AddressType]
--*****************************************************************************
 
IF OBJECT_ID('[Person].[AddressType_List]') IS NOT NULL DROP PROCEDURE [Person].[AddressType_List]
GO
CREATE PROCEDURE [Person].[AddressType_List]
AS
	SELECT
		[AddressTypeID],
		[Name],
		[rowguid],
		[ModifiedDate]
	FROM [Person].[AddressType]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Person].[AddressType_Insert]') IS NOT NULL DROP PROCEDURE [Person].[AddressType_Insert]
GO
CREATE PROCEDURE [Person].[AddressType_Insert]
(
	@Name NAME,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Person].[AddressType]
	(
		[Name],
		[rowguid],
		[ModifiedDate]
	)
	VALUES
	(
		@Name,
		@rowguid,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Person].[AddressType_Update]') IS NOT NULL DROP PROCEDURE [Person].[AddressType_Update]
GO
CREATE PROCEDURE [Person].[AddressType_Update]
(
	@AddressTypeID INT,
	@Name NAME,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Person].[AddressType] SET
		[Name] = @Name,
		[rowguid] = @rowguid,
		[ModifiedDate] = @ModifiedDate
	WHERE
		AddressTypeID = @AddressTypeID

GO



--*****************************************************************************
--	Stored procedures for [Person].[Contact]
--*****************************************************************************
 
IF OBJECT_ID('[Person].[Contact_List]') IS NOT NULL DROP PROCEDURE [Person].[Contact_List]
GO
CREATE PROCEDURE [Person].[Contact_List]
AS
	SELECT
		[ContactID],
		[NameStyle],
		[Title],
		[FirstName],
		[MiddleName],
		[LastName],
		[Suffix],
		[EmailAddress],
		[EmailPromotion],
		[Phone],
		[PasswordHash],
		[PasswordSalt],
		[AdditionalContactInfo],
		[rowguid],
		[ModifiedDate]
	FROM [Person].[Contact]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Person].[Contact_Insert]') IS NOT NULL DROP PROCEDURE [Person].[Contact_Insert]
GO
CREATE PROCEDURE [Person].[Contact_Insert]
(
	@NameStyle NAMESTYLE,
	@Title NVARCHAR(8),
	@FirstName NAME,
	@MiddleName NAME,
	@LastName NAME,
	@Suffix NVARCHAR(10),
	@EmailAddress NVARCHAR(50),
	@EmailPromotion INT,
	@Phone PHONE,
	@PasswordHash VARCHAR(128),
	@PasswordSalt VARCHAR(10),
	@AdditionalContactInfo XML,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Person].[Contact]
	(
		[NameStyle],
		[Title],
		[FirstName],
		[MiddleName],
		[LastName],
		[Suffix],
		[EmailAddress],
		[EmailPromotion],
		[Phone],
		[PasswordHash],
		[PasswordSalt],
		[AdditionalContactInfo],
		[rowguid],
		[ModifiedDate]
	)
	VALUES
	(
		@NameStyle,
		@Title,
		@FirstName,
		@MiddleName,
		@LastName,
		@Suffix,
		@EmailAddress,
		@EmailPromotion,
		@Phone,
		@PasswordHash,
		@PasswordSalt,
		@AdditionalContactInfo,
		@rowguid,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Person].[Contact_Update]') IS NOT NULL DROP PROCEDURE [Person].[Contact_Update]
GO
CREATE PROCEDURE [Person].[Contact_Update]
(
	@ContactID INT,
	@NameStyle NAMESTYLE,
	@Title NVARCHAR(8),
	@FirstName NAME,
	@MiddleName NAME,
	@LastName NAME,
	@Suffix NVARCHAR(10),
	@EmailAddress NVARCHAR(50),
	@EmailPromotion INT,
	@Phone PHONE,
	@PasswordHash VARCHAR(128),
	@PasswordSalt VARCHAR(10),
	@AdditionalContactInfo XML,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Person].[Contact] SET
		[NameStyle] = @NameStyle,
		[Title] = @Title,
		[FirstName] = @FirstName,
		[MiddleName] = @MiddleName,
		[LastName] = @LastName,
		[Suffix] = @Suffix,
		[EmailAddress] = @EmailAddress,
		[EmailPromotion] = @EmailPromotion,
		[Phone] = @Phone,
		[PasswordHash] = @PasswordHash,
		[PasswordSalt] = @PasswordSalt,
		[AdditionalContactInfo] = @AdditionalContactInfo,
		[rowguid] = @rowguid,
		[ModifiedDate] = @ModifiedDate
	WHERE
		ContactID = @ContactID

GO



--*****************************************************************************
--	Stored procedures for [Person].[ContactType]
--*****************************************************************************
 
IF OBJECT_ID('[Person].[ContactType_List]') IS NOT NULL DROP PROCEDURE [Person].[ContactType_List]
GO
CREATE PROCEDURE [Person].[ContactType_List]
AS
	SELECT
		[ContactTypeID],
		[Name],
		[ModifiedDate]
	FROM [Person].[ContactType]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Person].[ContactType_Insert]') IS NOT NULL DROP PROCEDURE [Person].[ContactType_Insert]
GO
CREATE PROCEDURE [Person].[ContactType_Insert]
(
	@Name NAME,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Person].[ContactType]
	(
		[Name],
		[ModifiedDate]
	)
	VALUES
	(
		@Name,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Person].[ContactType_Update]') IS NOT NULL DROP PROCEDURE [Person].[ContactType_Update]
GO
CREATE PROCEDURE [Person].[ContactType_Update]
(
	@ContactTypeID INT,
	@Name NAME,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Person].[ContactType] SET
		[Name] = @Name,
		[ModifiedDate] = @ModifiedDate
	WHERE
		ContactTypeID = @ContactTypeID

GO



--*****************************************************************************
--	Stored procedures for [Person].[CountryRegion]
--*****************************************************************************
 
IF OBJECT_ID('[Person].[CountryRegion_List]') IS NOT NULL DROP PROCEDURE [Person].[CountryRegion_List]
GO
CREATE PROCEDURE [Person].[CountryRegion_List]
AS
	SELECT
		[CountryRegionCode],
		[Name],
		[ModifiedDate]
	FROM [Person].[CountryRegion]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Person].[CountryRegion_Insert]') IS NOT NULL DROP PROCEDURE [Person].[CountryRegion_Insert]
GO
CREATE PROCEDURE [Person].[CountryRegion_Insert]
(
	@CountryRegionCode NVARCHAR(3),
	@Name NAME,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Person].[CountryRegion]
	(
		[CountryRegionCode],
		[Name],
		[ModifiedDate]
	)
	VALUES
	(
		@CountryRegionCode,
		@Name,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Person].[CountryRegion_Update]') IS NOT NULL DROP PROCEDURE [Person].[CountryRegion_Update]
GO
CREATE PROCEDURE [Person].[CountryRegion_Update]
(
	@CountryRegionCode NVARCHAR(3),
	@Name NAME,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Person].[CountryRegion] SET
		[CountryRegionCode] = @CountryRegionCode,
		[Name] = @Name,
		[ModifiedDate] = @ModifiedDate
	WHERE
		CountryRegionCode = @CountryRegionCode

GO



--*****************************************************************************
--	Stored procedures for [Person].[StateProvince]
--*****************************************************************************
 
IF OBJECT_ID('[Person].[StateProvince_List]') IS NOT NULL DROP PROCEDURE [Person].[StateProvince_List]
GO
CREATE PROCEDURE [Person].[StateProvince_List]
AS
	SELECT
		[StateProvinceID],
		[StateProvinceCode],
		[CountryRegionCode],
		[IsOnlyStateProvinceFlag],
		[Name],
		[TerritoryID],
		[rowguid],
		[ModifiedDate]
	FROM [Person].[StateProvince]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Person].[StateProvince_Insert]') IS NOT NULL DROP PROCEDURE [Person].[StateProvince_Insert]
GO
CREATE PROCEDURE [Person].[StateProvince_Insert]
(
	@StateProvinceCode NCHAR(3),
	@CountryRegionCode NVARCHAR(3),
	@IsOnlyStateProvinceFlag FLAG,
	@Name NAME,
	@TerritoryID INT,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Person].[StateProvince]
	(
		[StateProvinceCode],
		[CountryRegionCode],
		[IsOnlyStateProvinceFlag],
		[Name],
		[TerritoryID],
		[rowguid],
		[ModifiedDate]
	)
	VALUES
	(
		@StateProvinceCode,
		@CountryRegionCode,
		@IsOnlyStateProvinceFlag,
		@Name,
		@TerritoryID,
		@rowguid,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Person].[StateProvince_Update]') IS NOT NULL DROP PROCEDURE [Person].[StateProvince_Update]
GO
CREATE PROCEDURE [Person].[StateProvince_Update]
(
	@StateProvinceID INT,
	@StateProvinceCode NCHAR(3),
	@CountryRegionCode NVARCHAR(3),
	@IsOnlyStateProvinceFlag FLAG,
	@Name NAME,
	@TerritoryID INT,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Person].[StateProvince] SET
		[StateProvinceCode] = @StateProvinceCode,
		[CountryRegionCode] = @CountryRegionCode,
		[IsOnlyStateProvinceFlag] = @IsOnlyStateProvinceFlag,
		[Name] = @Name,
		[TerritoryID] = @TerritoryID,
		[rowguid] = @rowguid,
		[ModifiedDate] = @ModifiedDate
	WHERE
		StateProvinceID = @StateProvinceID

GO



--*****************************************************************************
--	Stored procedures for [Production].[BillOfMaterials]
--*****************************************************************************
 
IF OBJECT_ID('[Production].[BillOfMaterials_List]') IS NOT NULL DROP PROCEDURE [Production].[BillOfMaterials_List]
GO
CREATE PROCEDURE [Production].[BillOfMaterials_List]
AS
	SELECT
		[BillOfMaterialsID],
		[ProductAssemblyID],
		[ComponentID],
		[StartDate],
		[EndDate],
		[UnitMeasureCode],
		[BOMLevel],
		[PerAssemblyQty],
		[ModifiedDate]
	FROM [Production].[BillOfMaterials]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[BillOfMaterials_Insert]') IS NOT NULL DROP PROCEDURE [Production].[BillOfMaterials_Insert]
GO
CREATE PROCEDURE [Production].[BillOfMaterials_Insert]
(
	@ProductAssemblyID INT,
	@ComponentID INT,
	@StartDate DATETIME,
	@EndDate DATETIME,
	@UnitMeasureCode NCHAR(3),
	@BOMLevel SMALLINT,
	@PerAssemblyQty DECIMAL,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Production].[BillOfMaterials]
	(
		[ProductAssemblyID],
		[ComponentID],
		[StartDate],
		[EndDate],
		[UnitMeasureCode],
		[BOMLevel],
		[PerAssemblyQty],
		[ModifiedDate]
	)
	VALUES
	(
		@ProductAssemblyID,
		@ComponentID,
		@StartDate,
		@EndDate,
		@UnitMeasureCode,
		@BOMLevel,
		@PerAssemblyQty,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[BillOfMaterials_Update]') IS NOT NULL DROP PROCEDURE [Production].[BillOfMaterials_Update]
GO
CREATE PROCEDURE [Production].[BillOfMaterials_Update]
(
	@BillOfMaterialsID INT,
	@ProductAssemblyID INT,
	@ComponentID INT,
	@StartDate DATETIME,
	@EndDate DATETIME,
	@UnitMeasureCode NCHAR(3),
	@BOMLevel SMALLINT,
	@PerAssemblyQty DECIMAL,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Production].[BillOfMaterials] SET
		[ProductAssemblyID] = @ProductAssemblyID,
		[ComponentID] = @ComponentID,
		[StartDate] = @StartDate,
		[EndDate] = @EndDate,
		[UnitMeasureCode] = @UnitMeasureCode,
		[BOMLevel] = @BOMLevel,
		[PerAssemblyQty] = @PerAssemblyQty,
		[ModifiedDate] = @ModifiedDate
	WHERE
		BillOfMaterialsID = @BillOfMaterialsID

GO



--*****************************************************************************
--	Stored procedures for [Production].[Culture]
--*****************************************************************************
 
IF OBJECT_ID('[Production].[Culture_List]') IS NOT NULL DROP PROCEDURE [Production].[Culture_List]
GO
CREATE PROCEDURE [Production].[Culture_List]
AS
	SELECT
		[CultureID],
		[Name],
		[ModifiedDate]
	FROM [Production].[Culture]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[Culture_Insert]') IS NOT NULL DROP PROCEDURE [Production].[Culture_Insert]
GO
CREATE PROCEDURE [Production].[Culture_Insert]
(
	@CultureID NCHAR(6),
	@Name NAME,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Production].[Culture]
	(
		[CultureID],
		[Name],
		[ModifiedDate]
	)
	VALUES
	(
		@CultureID,
		@Name,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[Culture_Update]') IS NOT NULL DROP PROCEDURE [Production].[Culture_Update]
GO
CREATE PROCEDURE [Production].[Culture_Update]
(
	@CultureID NCHAR(6),
	@Name NAME,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Production].[Culture] SET
		[CultureID] = @CultureID,
		[Name] = @Name,
		[ModifiedDate] = @ModifiedDate
	WHERE
		CultureID = @CultureID

GO



--*****************************************************************************
--	Stored procedures for [Production].[Document]
--*****************************************************************************
 
IF OBJECT_ID('[Production].[Document_List]') IS NOT NULL DROP PROCEDURE [Production].[Document_List]
GO
CREATE PROCEDURE [Production].[Document_List]
AS
	SELECT
		[DocumentID],
		[Title],
		[FileName],
		[FileExtension],
		[Revision],
		[ChangeNumber],
		[Status],
		[DocumentSummary],
		[Document],
		[ModifiedDate]
	FROM [Production].[Document]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[Document_Insert]') IS NOT NULL DROP PROCEDURE [Production].[Document_Insert]
GO
CREATE PROCEDURE [Production].[Document_Insert]
(
	@Title NVARCHAR(50),
	@FileName NVARCHAR(400),
	@FileExtension NVARCHAR(8),
	@Revision NCHAR(5),
	@ChangeNumber INT,
	@Status TINYINT,
	@DocumentSummary NVARCHAR(MAX),
	@Document VARBINARY(MAX),
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Production].[Document]
	(
		[Title],
		[FileName],
		[FileExtension],
		[Revision],
		[ChangeNumber],
		[Status],
		[DocumentSummary],
		[Document],
		[ModifiedDate]
	)
	VALUES
	(
		@Title,
		@FileName,
		@FileExtension,
		@Revision,
		@ChangeNumber,
		@Status,
		@DocumentSummary,
		@Document,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[Document_Update]') IS NOT NULL DROP PROCEDURE [Production].[Document_Update]
GO
CREATE PROCEDURE [Production].[Document_Update]
(
	@DocumentID INT,
	@Title NVARCHAR(50),
	@FileName NVARCHAR(400),
	@FileExtension NVARCHAR(8),
	@Revision NCHAR(5),
	@ChangeNumber INT,
	@Status TINYINT,
	@DocumentSummary NVARCHAR(MAX),
	@Document VARBINARY(MAX),
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Production].[Document] SET
		[Title] = @Title,
		[FileName] = @FileName,
		[FileExtension] = @FileExtension,
		[Revision] = @Revision,
		[ChangeNumber] = @ChangeNumber,
		[Status] = @Status,
		[DocumentSummary] = @DocumentSummary,
		[Document] = @Document,
		[ModifiedDate] = @ModifiedDate
	WHERE
		DocumentID = @DocumentID

GO



--*****************************************************************************
--	Stored procedures for [Production].[Illustration]
--*****************************************************************************
 
IF OBJECT_ID('[Production].[Illustration_List]') IS NOT NULL DROP PROCEDURE [Production].[Illustration_List]
GO
CREATE PROCEDURE [Production].[Illustration_List]
AS
	SELECT
		[IllustrationID],
		[Diagram],
		[ModifiedDate]
	FROM [Production].[Illustration]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[Illustration_Insert]') IS NOT NULL DROP PROCEDURE [Production].[Illustration_Insert]
GO
CREATE PROCEDURE [Production].[Illustration_Insert]
(
	@Diagram XML,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Production].[Illustration]
	(
		[Diagram],
		[ModifiedDate]
	)
	VALUES
	(
		@Diagram,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[Illustration_Update]') IS NOT NULL DROP PROCEDURE [Production].[Illustration_Update]
GO
CREATE PROCEDURE [Production].[Illustration_Update]
(
	@IllustrationID INT,
	@Diagram XML,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Production].[Illustration] SET
		[Diagram] = @Diagram,
		[ModifiedDate] = @ModifiedDate
	WHERE
		IllustrationID = @IllustrationID

GO



--*****************************************************************************
--	Stored procedures for [Production].[Location]
--*****************************************************************************
 
IF OBJECT_ID('[Production].[Location_List]') IS NOT NULL DROP PROCEDURE [Production].[Location_List]
GO
CREATE PROCEDURE [Production].[Location_List]
AS
	SELECT
		[LocationID],
		[Name],
		[CostRate],
		[Availability],
		[ModifiedDate]
	FROM [Production].[Location]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[Location_Insert]') IS NOT NULL DROP PROCEDURE [Production].[Location_Insert]
GO
CREATE PROCEDURE [Production].[Location_Insert]
(
	@Name NAME,
	@CostRate SMALLMONEY,
	@Availability DECIMAL,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Production].[Location]
	(
		[Name],
		[CostRate],
		[Availability],
		[ModifiedDate]
	)
	VALUES
	(
		@Name,
		@CostRate,
		@Availability,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[Location_Update]') IS NOT NULL DROP PROCEDURE [Production].[Location_Update]
GO
CREATE PROCEDURE [Production].[Location_Update]
(
	@LocationID SMALLINT,
	@Name NAME,
	@CostRate SMALLMONEY,
	@Availability DECIMAL,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Production].[Location] SET
		[Name] = @Name,
		[CostRate] = @CostRate,
		[Availability] = @Availability,
		[ModifiedDate] = @ModifiedDate
	WHERE
		LocationID = @LocationID

GO



--*****************************************************************************
--	Stored procedures for [Production].[Product]
--*****************************************************************************
 
IF OBJECT_ID('[Production].[Product_List]') IS NOT NULL DROP PROCEDURE [Production].[Product_List]
GO
CREATE PROCEDURE [Production].[Product_List]
AS
	SELECT
		[ProductID],
		[Name],
		[ProductNumber],
		[MakeFlag],
		[FinishedGoodsFlag],
		[Color],
		[SafetyStockLevel],
		[ReorderPoint],
		[StandardCost],
		[ListPrice],
		[Size],
		[SizeUnitMeasureCode],
		[WeightUnitMeasureCode],
		[Weight],
		[DaysToManufacture],
		[ProductLine],
		[Class],
		[Style],
		[ProductSubcategoryID],
		[ProductModelID],
		[SellStartDate],
		[SellEndDate],
		[DiscontinuedDate],
		[rowguid],
		[ModifiedDate]
	FROM [Production].[Product]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[Product_Insert]') IS NOT NULL DROP PROCEDURE [Production].[Product_Insert]
GO
CREATE PROCEDURE [Production].[Product_Insert]
(
	@Name NAME,
	@ProductNumber NVARCHAR(25),
	@MakeFlag FLAG,
	@FinishedGoodsFlag FLAG,
	@Color NVARCHAR(15),
	@SafetyStockLevel SMALLINT,
	@ReorderPoint SMALLINT,
	@StandardCost MONEY,
	@ListPrice MONEY,
	@Size NVARCHAR(5),
	@SizeUnitMeasureCode NCHAR(3),
	@WeightUnitMeasureCode NCHAR(3),
	@Weight DECIMAL,
	@DaysToManufacture INT,
	@ProductLine NCHAR(2),
	@Class NCHAR(2),
	@Style NCHAR(2),
	@ProductSubcategoryID INT,
	@ProductModelID INT,
	@SellStartDate DATETIME,
	@SellEndDate DATETIME,
	@DiscontinuedDate DATETIME,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Production].[Product]
	(
		[Name],
		[ProductNumber],
		[MakeFlag],
		[FinishedGoodsFlag],
		[Color],
		[SafetyStockLevel],
		[ReorderPoint],
		[StandardCost],
		[ListPrice],
		[Size],
		[SizeUnitMeasureCode],
		[WeightUnitMeasureCode],
		[Weight],
		[DaysToManufacture],
		[ProductLine],
		[Class],
		[Style],
		[ProductSubcategoryID],
		[ProductModelID],
		[SellStartDate],
		[SellEndDate],
		[DiscontinuedDate],
		[rowguid],
		[ModifiedDate]
	)
	VALUES
	(
		@Name,
		@ProductNumber,
		@MakeFlag,
		@FinishedGoodsFlag,
		@Color,
		@SafetyStockLevel,
		@ReorderPoint,
		@StandardCost,
		@ListPrice,
		@Size,
		@SizeUnitMeasureCode,
		@WeightUnitMeasureCode,
		@Weight,
		@DaysToManufacture,
		@ProductLine,
		@Class,
		@Style,
		@ProductSubcategoryID,
		@ProductModelID,
		@SellStartDate,
		@SellEndDate,
		@DiscontinuedDate,
		@rowguid,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[Product_Update]') IS NOT NULL DROP PROCEDURE [Production].[Product_Update]
GO
CREATE PROCEDURE [Production].[Product_Update]
(
	@ProductID INT,
	@Name NAME,
	@ProductNumber NVARCHAR(25),
	@MakeFlag FLAG,
	@FinishedGoodsFlag FLAG,
	@Color NVARCHAR(15),
	@SafetyStockLevel SMALLINT,
	@ReorderPoint SMALLINT,
	@StandardCost MONEY,
	@ListPrice MONEY,
	@Size NVARCHAR(5),
	@SizeUnitMeasureCode NCHAR(3),
	@WeightUnitMeasureCode NCHAR(3),
	@Weight DECIMAL,
	@DaysToManufacture INT,
	@ProductLine NCHAR(2),
	@Class NCHAR(2),
	@Style NCHAR(2),
	@ProductSubcategoryID INT,
	@ProductModelID INT,
	@SellStartDate DATETIME,
	@SellEndDate DATETIME,
	@DiscontinuedDate DATETIME,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Production].[Product] SET
		[Name] = @Name,
		[ProductNumber] = @ProductNumber,
		[MakeFlag] = @MakeFlag,
		[FinishedGoodsFlag] = @FinishedGoodsFlag,
		[Color] = @Color,
		[SafetyStockLevel] = @SafetyStockLevel,
		[ReorderPoint] = @ReorderPoint,
		[StandardCost] = @StandardCost,
		[ListPrice] = @ListPrice,
		[Size] = @Size,
		[SizeUnitMeasureCode] = @SizeUnitMeasureCode,
		[WeightUnitMeasureCode] = @WeightUnitMeasureCode,
		[Weight] = @Weight,
		[DaysToManufacture] = @DaysToManufacture,
		[ProductLine] = @ProductLine,
		[Class] = @Class,
		[Style] = @Style,
		[ProductSubcategoryID] = @ProductSubcategoryID,
		[ProductModelID] = @ProductModelID,
		[SellStartDate] = @SellStartDate,
		[SellEndDate] = @SellEndDate,
		[DiscontinuedDate] = @DiscontinuedDate,
		[rowguid] = @rowguid,
		[ModifiedDate] = @ModifiedDate
	WHERE
		ProductID = @ProductID

GO



--*****************************************************************************
--	Stored procedures for [Production].[ProductCategory]
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductCategory_List]') IS NOT NULL DROP PROCEDURE [Production].[ProductCategory_List]
GO
CREATE PROCEDURE [Production].[ProductCategory_List]
AS
	SELECT
		[ProductCategoryID],
		[Name],
		[rowguid],
		[ModifiedDate]
	FROM [Production].[ProductCategory]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductCategory_Insert]') IS NOT NULL DROP PROCEDURE [Production].[ProductCategory_Insert]
GO
CREATE PROCEDURE [Production].[ProductCategory_Insert]
(
	@Name NAME,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Production].[ProductCategory]
	(
		[Name],
		[rowguid],
		[ModifiedDate]
	)
	VALUES
	(
		@Name,
		@rowguid,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductCategory_Update]') IS NOT NULL DROP PROCEDURE [Production].[ProductCategory_Update]
GO
CREATE PROCEDURE [Production].[ProductCategory_Update]
(
	@ProductCategoryID INT,
	@Name NAME,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Production].[ProductCategory] SET
		[Name] = @Name,
		[rowguid] = @rowguid,
		[ModifiedDate] = @ModifiedDate
	WHERE
		ProductCategoryID = @ProductCategoryID

GO



--*****************************************************************************
--	Stored procedures for [Production].[ProductCostHistory]
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductCostHistory_List]') IS NOT NULL DROP PROCEDURE [Production].[ProductCostHistory_List]
GO
CREATE PROCEDURE [Production].[ProductCostHistory_List]
AS
	SELECT
		[ProductID],
		[StartDate],
		[EndDate],
		[StandardCost],
		[ModifiedDate]
	FROM [Production].[ProductCostHistory]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductCostHistory_Insert]') IS NOT NULL DROP PROCEDURE [Production].[ProductCostHistory_Insert]
GO
CREATE PROCEDURE [Production].[ProductCostHistory_Insert]
(
	@ProductID INT,
	@StartDate DATETIME,
	@EndDate DATETIME,
	@StandardCost MONEY,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Production].[ProductCostHistory]
	(
		[ProductID],
		[StartDate],
		[EndDate],
		[StandardCost],
		[ModifiedDate]
	)
	VALUES
	(
		@ProductID,
		@StartDate,
		@EndDate,
		@StandardCost,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductCostHistory_Update]') IS NOT NULL DROP PROCEDURE [Production].[ProductCostHistory_Update]
GO
CREATE PROCEDURE [Production].[ProductCostHistory_Update]
(
	@ProductID INT,
	@StartDate DATETIME,
	@EndDate DATETIME,
	@StandardCost MONEY,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Production].[ProductCostHistory] SET
		[ProductID] = @ProductID,
		[StartDate] = @StartDate,
		[EndDate] = @EndDate,
		[StandardCost] = @StandardCost,
		[ModifiedDate] = @ModifiedDate
	WHERE
		ProductID = @ProductID AND
		StartDate = @StartDate

GO



--*****************************************************************************
--	Stored procedures for [Production].[ProductDescription]
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductDescription_List]') IS NOT NULL DROP PROCEDURE [Production].[ProductDescription_List]
GO
CREATE PROCEDURE [Production].[ProductDescription_List]
AS
	SELECT
		[ProductDescriptionID],
		[Description],
		[rowguid],
		[ModifiedDate]
	FROM [Production].[ProductDescription]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductDescription_Insert]') IS NOT NULL DROP PROCEDURE [Production].[ProductDescription_Insert]
GO
CREATE PROCEDURE [Production].[ProductDescription_Insert]
(
	@Description NVARCHAR(400),
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Production].[ProductDescription]
	(
		[Description],
		[rowguid],
		[ModifiedDate]
	)
	VALUES
	(
		@Description,
		@rowguid,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductDescription_Update]') IS NOT NULL DROP PROCEDURE [Production].[ProductDescription_Update]
GO
CREATE PROCEDURE [Production].[ProductDescription_Update]
(
	@ProductDescriptionID INT,
	@Description NVARCHAR(400),
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Production].[ProductDescription] SET
		[Description] = @Description,
		[rowguid] = @rowguid,
		[ModifiedDate] = @ModifiedDate
	WHERE
		ProductDescriptionID = @ProductDescriptionID

GO



--*****************************************************************************
--	Stored procedures for [Production].[ProductDocument]
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductDocument_List]') IS NOT NULL DROP PROCEDURE [Production].[ProductDocument_List]
GO
CREATE PROCEDURE [Production].[ProductDocument_List]
AS
	SELECT
		[ProductID],
		[DocumentID],
		[ModifiedDate]
	FROM [Production].[ProductDocument]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductDocument_Insert]') IS NOT NULL DROP PROCEDURE [Production].[ProductDocument_Insert]
GO
CREATE PROCEDURE [Production].[ProductDocument_Insert]
(
	@ProductID INT,
	@DocumentID INT,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Production].[ProductDocument]
	(
		[ProductID],
		[DocumentID],
		[ModifiedDate]
	)
	VALUES
	(
		@ProductID,
		@DocumentID,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductDocument_Update]') IS NOT NULL DROP PROCEDURE [Production].[ProductDocument_Update]
GO
CREATE PROCEDURE [Production].[ProductDocument_Update]
(
	@ProductID INT,
	@DocumentID INT,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Production].[ProductDocument] SET
		[ProductID] = @ProductID,
		[DocumentID] = @DocumentID,
		[ModifiedDate] = @ModifiedDate
	WHERE
		ProductID = @ProductID AND
		DocumentID = @DocumentID

GO



--*****************************************************************************
--	Stored procedures for [Production].[ProductInventory]
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductInventory_List]') IS NOT NULL DROP PROCEDURE [Production].[ProductInventory_List]
GO
CREATE PROCEDURE [Production].[ProductInventory_List]
AS
	SELECT
		[ProductID],
		[LocationID],
		[Shelf],
		[Bin],
		[Quantity],
		[rowguid],
		[ModifiedDate]
	FROM [Production].[ProductInventory]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductInventory_Insert]') IS NOT NULL DROP PROCEDURE [Production].[ProductInventory_Insert]
GO
CREATE PROCEDURE [Production].[ProductInventory_Insert]
(
	@ProductID INT,
	@LocationID SMALLINT,
	@Shelf NVARCHAR(10),
	@Bin TINYINT,
	@Quantity SMALLINT,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Production].[ProductInventory]
	(
		[ProductID],
		[LocationID],
		[Shelf],
		[Bin],
		[Quantity],
		[rowguid],
		[ModifiedDate]
	)
	VALUES
	(
		@ProductID,
		@LocationID,
		@Shelf,
		@Bin,
		@Quantity,
		@rowguid,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductInventory_Update]') IS NOT NULL DROP PROCEDURE [Production].[ProductInventory_Update]
GO
CREATE PROCEDURE [Production].[ProductInventory_Update]
(
	@ProductID INT,
	@LocationID SMALLINT,
	@Shelf NVARCHAR(10),
	@Bin TINYINT,
	@Quantity SMALLINT,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Production].[ProductInventory] SET
		[ProductID] = @ProductID,
		[LocationID] = @LocationID,
		[Shelf] = @Shelf,
		[Bin] = @Bin,
		[Quantity] = @Quantity,
		[rowguid] = @rowguid,
		[ModifiedDate] = @ModifiedDate
	WHERE
		ProductID = @ProductID AND
		LocationID = @LocationID

GO



--*****************************************************************************
--	Stored procedures for [Production].[ProductListPriceHistory]
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductListPriceHistory_List]') IS NOT NULL DROP PROCEDURE [Production].[ProductListPriceHistory_List]
GO
CREATE PROCEDURE [Production].[ProductListPriceHistory_List]
AS
	SELECT
		[ProductID],
		[StartDate],
		[EndDate],
		[ListPrice],
		[ModifiedDate]
	FROM [Production].[ProductListPriceHistory]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductListPriceHistory_Insert]') IS NOT NULL DROP PROCEDURE [Production].[ProductListPriceHistory_Insert]
GO
CREATE PROCEDURE [Production].[ProductListPriceHistory_Insert]
(
	@ProductID INT,
	@StartDate DATETIME,
	@EndDate DATETIME,
	@ListPrice MONEY,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Production].[ProductListPriceHistory]
	(
		[ProductID],
		[StartDate],
		[EndDate],
		[ListPrice],
		[ModifiedDate]
	)
	VALUES
	(
		@ProductID,
		@StartDate,
		@EndDate,
		@ListPrice,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductListPriceHistory_Update]') IS NOT NULL DROP PROCEDURE [Production].[ProductListPriceHistory_Update]
GO
CREATE PROCEDURE [Production].[ProductListPriceHistory_Update]
(
	@ProductID INT,
	@StartDate DATETIME,
	@EndDate DATETIME,
	@ListPrice MONEY,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Production].[ProductListPriceHistory] SET
		[ProductID] = @ProductID,
		[StartDate] = @StartDate,
		[EndDate] = @EndDate,
		[ListPrice] = @ListPrice,
		[ModifiedDate] = @ModifiedDate
	WHERE
		ProductID = @ProductID AND
		StartDate = @StartDate

GO



--*****************************************************************************
--	Stored procedures for [Production].[ProductModel]
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductModel_List]') IS NOT NULL DROP PROCEDURE [Production].[ProductModel_List]
GO
CREATE PROCEDURE [Production].[ProductModel_List]
AS
	SELECT
		[ProductModelID],
		[Name],
		[CatalogDescription],
		[Instructions],
		[rowguid],
		[ModifiedDate]
	FROM [Production].[ProductModel]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductModel_Insert]') IS NOT NULL DROP PROCEDURE [Production].[ProductModel_Insert]
GO
CREATE PROCEDURE [Production].[ProductModel_Insert]
(
	@Name NAME,
	@CatalogDescription XML,
	@Instructions XML,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Production].[ProductModel]
	(
		[Name],
		[CatalogDescription],
		[Instructions],
		[rowguid],
		[ModifiedDate]
	)
	VALUES
	(
		@Name,
		@CatalogDescription,
		@Instructions,
		@rowguid,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductModel_Update]') IS NOT NULL DROP PROCEDURE [Production].[ProductModel_Update]
GO
CREATE PROCEDURE [Production].[ProductModel_Update]
(
	@ProductModelID INT,
	@Name NAME,
	@CatalogDescription XML,
	@Instructions XML,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Production].[ProductModel] SET
		[Name] = @Name,
		[CatalogDescription] = @CatalogDescription,
		[Instructions] = @Instructions,
		[rowguid] = @rowguid,
		[ModifiedDate] = @ModifiedDate
	WHERE
		ProductModelID = @ProductModelID

GO



--*****************************************************************************
--	Stored procedures for [Production].[ProductModelIllustration]
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductModelIllustration_List]') IS NOT NULL DROP PROCEDURE [Production].[ProductModelIllustration_List]
GO
CREATE PROCEDURE [Production].[ProductModelIllustration_List]
AS
	SELECT
		[ProductModelID],
		[IllustrationID],
		[ModifiedDate]
	FROM [Production].[ProductModelIllustration]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductModelIllustration_Insert]') IS NOT NULL DROP PROCEDURE [Production].[ProductModelIllustration_Insert]
GO
CREATE PROCEDURE [Production].[ProductModelIllustration_Insert]
(
	@ProductModelID INT,
	@IllustrationID INT,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Production].[ProductModelIllustration]
	(
		[ProductModelID],
		[IllustrationID],
		[ModifiedDate]
	)
	VALUES
	(
		@ProductModelID,
		@IllustrationID,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductModelIllustration_Update]') IS NOT NULL DROP PROCEDURE [Production].[ProductModelIllustration_Update]
GO
CREATE PROCEDURE [Production].[ProductModelIllustration_Update]
(
	@ProductModelID INT,
	@IllustrationID INT,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Production].[ProductModelIllustration] SET
		[ProductModelID] = @ProductModelID,
		[IllustrationID] = @IllustrationID,
		[ModifiedDate] = @ModifiedDate
	WHERE
		ProductModelID = @ProductModelID AND
		IllustrationID = @IllustrationID

GO



--*****************************************************************************
--	Stored procedures for [Production].[ProductModelProductDescriptionCulture]
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductModelProductDescriptionCulture_List]') IS NOT NULL DROP PROCEDURE [Production].[ProductModelProductDescriptionCulture_List]
GO
CREATE PROCEDURE [Production].[ProductModelProductDescriptionCulture_List]
AS
	SELECT
		[ProductModelID],
		[ProductDescriptionID],
		[CultureID],
		[ModifiedDate]
	FROM [Production].[ProductModelProductDescriptionCulture]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductModelProductDescriptionCulture_Insert]') IS NOT NULL DROP PROCEDURE [Production].[ProductModelProductDescriptionCulture_Insert]
GO
CREATE PROCEDURE [Production].[ProductModelProductDescriptionCulture_Insert]
(
	@ProductModelID INT,
	@ProductDescriptionID INT,
	@CultureID NCHAR(6),
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Production].[ProductModelProductDescriptionCulture]
	(
		[ProductModelID],
		[ProductDescriptionID],
		[CultureID],
		[ModifiedDate]
	)
	VALUES
	(
		@ProductModelID,
		@ProductDescriptionID,
		@CultureID,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductModelProductDescriptionCulture_Update]') IS NOT NULL DROP PROCEDURE [Production].[ProductModelProductDescriptionCulture_Update]
GO
CREATE PROCEDURE [Production].[ProductModelProductDescriptionCulture_Update]
(
	@ProductModelID INT,
	@ProductDescriptionID INT,
	@CultureID NCHAR(6),
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Production].[ProductModelProductDescriptionCulture] SET
		[ProductModelID] = @ProductModelID,
		[ProductDescriptionID] = @ProductDescriptionID,
		[CultureID] = @CultureID,
		[ModifiedDate] = @ModifiedDate
	WHERE
		ProductModelID = @ProductModelID AND
		ProductDescriptionID = @ProductDescriptionID AND
		CultureID = @CultureID

GO



--*****************************************************************************
--	Stored procedures for [Production].[ProductPhoto]
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductPhoto_List]') IS NOT NULL DROP PROCEDURE [Production].[ProductPhoto_List]
GO
CREATE PROCEDURE [Production].[ProductPhoto_List]
AS
	SELECT
		[ProductPhotoID],
		[ThumbNailPhoto],
		[ThumbnailPhotoFileName],
		[LargePhoto],
		[LargePhotoFileName],
		[ModifiedDate]
	FROM [Production].[ProductPhoto]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductPhoto_Insert]') IS NOT NULL DROP PROCEDURE [Production].[ProductPhoto_Insert]
GO
CREATE PROCEDURE [Production].[ProductPhoto_Insert]
(
	@ThumbNailPhoto VARBINARY(MAX),
	@ThumbnailPhotoFileName NVARCHAR(50),
	@LargePhoto VARBINARY(MAX),
	@LargePhotoFileName NVARCHAR(50),
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Production].[ProductPhoto]
	(
		[ThumbNailPhoto],
		[ThumbnailPhotoFileName],
		[LargePhoto],
		[LargePhotoFileName],
		[ModifiedDate]
	)
	VALUES
	(
		@ThumbNailPhoto,
		@ThumbnailPhotoFileName,
		@LargePhoto,
		@LargePhotoFileName,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductPhoto_Update]') IS NOT NULL DROP PROCEDURE [Production].[ProductPhoto_Update]
GO
CREATE PROCEDURE [Production].[ProductPhoto_Update]
(
	@ProductPhotoID INT,
	@ThumbNailPhoto VARBINARY(MAX),
	@ThumbnailPhotoFileName NVARCHAR(50),
	@LargePhoto VARBINARY(MAX),
	@LargePhotoFileName NVARCHAR(50),
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Production].[ProductPhoto] SET
		[ThumbNailPhoto] = @ThumbNailPhoto,
		[ThumbnailPhotoFileName] = @ThumbnailPhotoFileName,
		[LargePhoto] = @LargePhoto,
		[LargePhotoFileName] = @LargePhotoFileName,
		[ModifiedDate] = @ModifiedDate
	WHERE
		ProductPhotoID = @ProductPhotoID

GO



--*****************************************************************************
--	Stored procedures for [Production].[ProductProductPhoto]
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductProductPhoto_List]') IS NOT NULL DROP PROCEDURE [Production].[ProductProductPhoto_List]
GO
CREATE PROCEDURE [Production].[ProductProductPhoto_List]
AS
	SELECT
		[ProductID],
		[ProductPhotoID],
		[Primary],
		[ModifiedDate]
	FROM [Production].[ProductProductPhoto]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductProductPhoto_Insert]') IS NOT NULL DROP PROCEDURE [Production].[ProductProductPhoto_Insert]
GO
CREATE PROCEDURE [Production].[ProductProductPhoto_Insert]
(
	@ProductID INT,
	@ProductPhotoID INT,
	@Primary FLAG,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Production].[ProductProductPhoto]
	(
		[ProductID],
		[ProductPhotoID],
		[Primary],
		[ModifiedDate]
	)
	VALUES
	(
		@ProductID,
		@ProductPhotoID,
		@Primary,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductProductPhoto_Update]') IS NOT NULL DROP PROCEDURE [Production].[ProductProductPhoto_Update]
GO
CREATE PROCEDURE [Production].[ProductProductPhoto_Update]
(
	@ProductID INT,
	@ProductPhotoID INT,
	@Primary FLAG,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Production].[ProductProductPhoto] SET
		[ProductID] = @ProductID,
		[ProductPhotoID] = @ProductPhotoID,
		[Primary] = @Primary,
		[ModifiedDate] = @ModifiedDate
	WHERE
		ProductID = @ProductID AND
		ProductPhotoID = @ProductPhotoID

GO



--*****************************************************************************
--	Stored procedures for [Production].[ProductReview]
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductReview_List]') IS NOT NULL DROP PROCEDURE [Production].[ProductReview_List]
GO
CREATE PROCEDURE [Production].[ProductReview_List]
AS
	SELECT
		[ProductReviewID],
		[ProductID],
		[ReviewerName],
		[ReviewDate],
		[EmailAddress],
		[Rating],
		[Comments],
		[ModifiedDate]
	FROM [Production].[ProductReview]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductReview_Insert]') IS NOT NULL DROP PROCEDURE [Production].[ProductReview_Insert]
GO
CREATE PROCEDURE [Production].[ProductReview_Insert]
(
	@ProductID INT,
	@ReviewerName NAME,
	@ReviewDate DATETIME,
	@EmailAddress NVARCHAR(50),
	@Rating INT,
	@Comments NVARCHAR(3850),
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Production].[ProductReview]
	(
		[ProductID],
		[ReviewerName],
		[ReviewDate],
		[EmailAddress],
		[Rating],
		[Comments],
		[ModifiedDate]
	)
	VALUES
	(
		@ProductID,
		@ReviewerName,
		@ReviewDate,
		@EmailAddress,
		@Rating,
		@Comments,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductReview_Update]') IS NOT NULL DROP PROCEDURE [Production].[ProductReview_Update]
GO
CREATE PROCEDURE [Production].[ProductReview_Update]
(
	@ProductReviewID INT,
	@ProductID INT,
	@ReviewerName NAME,
	@ReviewDate DATETIME,
	@EmailAddress NVARCHAR(50),
	@Rating INT,
	@Comments NVARCHAR(3850),
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Production].[ProductReview] SET
		[ProductID] = @ProductID,
		[ReviewerName] = @ReviewerName,
		[ReviewDate] = @ReviewDate,
		[EmailAddress] = @EmailAddress,
		[Rating] = @Rating,
		[Comments] = @Comments,
		[ModifiedDate] = @ModifiedDate
	WHERE
		ProductReviewID = @ProductReviewID

GO



--*****************************************************************************
--	Stored procedures for [Production].[ProductSubcategory]
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductSubcategory_List]') IS NOT NULL DROP PROCEDURE [Production].[ProductSubcategory_List]
GO
CREATE PROCEDURE [Production].[ProductSubcategory_List]
AS
	SELECT
		[ProductSubcategoryID],
		[ProductCategoryID],
		[Name],
		[rowguid],
		[ModifiedDate]
	FROM [Production].[ProductSubcategory]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductSubcategory_Insert]') IS NOT NULL DROP PROCEDURE [Production].[ProductSubcategory_Insert]
GO
CREATE PROCEDURE [Production].[ProductSubcategory_Insert]
(
	@ProductCategoryID INT,
	@Name NAME,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Production].[ProductSubcategory]
	(
		[ProductCategoryID],
		[Name],
		[rowguid],
		[ModifiedDate]
	)
	VALUES
	(
		@ProductCategoryID,
		@Name,
		@rowguid,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ProductSubcategory_Update]') IS NOT NULL DROP PROCEDURE [Production].[ProductSubcategory_Update]
GO
CREATE PROCEDURE [Production].[ProductSubcategory_Update]
(
	@ProductSubcategoryID INT,
	@ProductCategoryID INT,
	@Name NAME,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Production].[ProductSubcategory] SET
		[ProductCategoryID] = @ProductCategoryID,
		[Name] = @Name,
		[rowguid] = @rowguid,
		[ModifiedDate] = @ModifiedDate
	WHERE
		ProductSubcategoryID = @ProductSubcategoryID

GO



--*****************************************************************************
--	Stored procedures for [Production].[ScrapReason]
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ScrapReason_List]') IS NOT NULL DROP PROCEDURE [Production].[ScrapReason_List]
GO
CREATE PROCEDURE [Production].[ScrapReason_List]
AS
	SELECT
		[ScrapReasonID],
		[Name],
		[ModifiedDate]
	FROM [Production].[ScrapReason]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ScrapReason_Insert]') IS NOT NULL DROP PROCEDURE [Production].[ScrapReason_Insert]
GO
CREATE PROCEDURE [Production].[ScrapReason_Insert]
(
	@Name NAME,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Production].[ScrapReason]
	(
		[Name],
		[ModifiedDate]
	)
	VALUES
	(
		@Name,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[ScrapReason_Update]') IS NOT NULL DROP PROCEDURE [Production].[ScrapReason_Update]
GO
CREATE PROCEDURE [Production].[ScrapReason_Update]
(
	@ScrapReasonID SMALLINT,
	@Name NAME,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Production].[ScrapReason] SET
		[Name] = @Name,
		[ModifiedDate] = @ModifiedDate
	WHERE
		ScrapReasonID = @ScrapReasonID

GO



--*****************************************************************************
--	Stored procedures for [Production].[TransactionHistory]
--*****************************************************************************
 
IF OBJECT_ID('[Production].[TransactionHistory_List]') IS NOT NULL DROP PROCEDURE [Production].[TransactionHistory_List]
GO
CREATE PROCEDURE [Production].[TransactionHistory_List]
AS
	SELECT
		[TransactionID],
		[ProductID],
		[ReferenceOrderID],
		[ReferenceOrderLineID],
		[TransactionDate],
		[TransactionType],
		[Quantity],
		[ActualCost],
		[ModifiedDate]
	FROM [Production].[TransactionHistory]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[TransactionHistory_Insert]') IS NOT NULL DROP PROCEDURE [Production].[TransactionHistory_Insert]
GO
CREATE PROCEDURE [Production].[TransactionHistory_Insert]
(
	@ProductID INT,
	@ReferenceOrderID INT,
	@ReferenceOrderLineID INT,
	@TransactionDate DATETIME,
	@TransactionType NCHAR(1),
	@Quantity INT,
	@ActualCost MONEY,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Production].[TransactionHistory]
	(
		[ProductID],
		[ReferenceOrderID],
		[ReferenceOrderLineID],
		[TransactionDate],
		[TransactionType],
		[Quantity],
		[ActualCost],
		[ModifiedDate]
	)
	VALUES
	(
		@ProductID,
		@ReferenceOrderID,
		@ReferenceOrderLineID,
		@TransactionDate,
		@TransactionType,
		@Quantity,
		@ActualCost,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[TransactionHistory_Update]') IS NOT NULL DROP PROCEDURE [Production].[TransactionHistory_Update]
GO
CREATE PROCEDURE [Production].[TransactionHistory_Update]
(
	@TransactionID INT,
	@ProductID INT,
	@ReferenceOrderID INT,
	@ReferenceOrderLineID INT,
	@TransactionDate DATETIME,
	@TransactionType NCHAR(1),
	@Quantity INT,
	@ActualCost MONEY,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Production].[TransactionHistory] SET
		[ProductID] = @ProductID,
		[ReferenceOrderID] = @ReferenceOrderID,
		[ReferenceOrderLineID] = @ReferenceOrderLineID,
		[TransactionDate] = @TransactionDate,
		[TransactionType] = @TransactionType,
		[Quantity] = @Quantity,
		[ActualCost] = @ActualCost,
		[ModifiedDate] = @ModifiedDate
	WHERE
		TransactionID = @TransactionID

GO



--*****************************************************************************
--	Stored procedures for [Production].[TransactionHistoryArchive]
--*****************************************************************************
 
IF OBJECT_ID('[Production].[TransactionHistoryArchive_List]') IS NOT NULL DROP PROCEDURE [Production].[TransactionHistoryArchive_List]
GO
CREATE PROCEDURE [Production].[TransactionHistoryArchive_List]
AS
	SELECT
		[TransactionID],
		[ProductID],
		[ReferenceOrderID],
		[ReferenceOrderLineID],
		[TransactionDate],
		[TransactionType],
		[Quantity],
		[ActualCost],
		[ModifiedDate]
	FROM [Production].[TransactionHistoryArchive]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[TransactionHistoryArchive_Insert]') IS NOT NULL DROP PROCEDURE [Production].[TransactionHistoryArchive_Insert]
GO
CREATE PROCEDURE [Production].[TransactionHistoryArchive_Insert]
(
	@TransactionID INT,
	@ProductID INT,
	@ReferenceOrderID INT,
	@ReferenceOrderLineID INT,
	@TransactionDate DATETIME,
	@TransactionType NCHAR(1),
	@Quantity INT,
	@ActualCost MONEY,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Production].[TransactionHistoryArchive]
	(
		[TransactionID],
		[ProductID],
		[ReferenceOrderID],
		[ReferenceOrderLineID],
		[TransactionDate],
		[TransactionType],
		[Quantity],
		[ActualCost],
		[ModifiedDate]
	)
	VALUES
	(
		@TransactionID,
		@ProductID,
		@ReferenceOrderID,
		@ReferenceOrderLineID,
		@TransactionDate,
		@TransactionType,
		@Quantity,
		@ActualCost,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[TransactionHistoryArchive_Update]') IS NOT NULL DROP PROCEDURE [Production].[TransactionHistoryArchive_Update]
GO
CREATE PROCEDURE [Production].[TransactionHistoryArchive_Update]
(
	@TransactionID INT,
	@ProductID INT,
	@ReferenceOrderID INT,
	@ReferenceOrderLineID INT,
	@TransactionDate DATETIME,
	@TransactionType NCHAR(1),
	@Quantity INT,
	@ActualCost MONEY,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Production].[TransactionHistoryArchive] SET
		[TransactionID] = @TransactionID,
		[ProductID] = @ProductID,
		[ReferenceOrderID] = @ReferenceOrderID,
		[ReferenceOrderLineID] = @ReferenceOrderLineID,
		[TransactionDate] = @TransactionDate,
		[TransactionType] = @TransactionType,
		[Quantity] = @Quantity,
		[ActualCost] = @ActualCost,
		[ModifiedDate] = @ModifiedDate
	WHERE
		TransactionID = @TransactionID

GO



--*****************************************************************************
--	Stored procedures for [Production].[UnitMeasure]
--*****************************************************************************
 
IF OBJECT_ID('[Production].[UnitMeasure_List]') IS NOT NULL DROP PROCEDURE [Production].[UnitMeasure_List]
GO
CREATE PROCEDURE [Production].[UnitMeasure_List]
AS
	SELECT
		[UnitMeasureCode],
		[Name],
		[ModifiedDate]
	FROM [Production].[UnitMeasure]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[UnitMeasure_Insert]') IS NOT NULL DROP PROCEDURE [Production].[UnitMeasure_Insert]
GO
CREATE PROCEDURE [Production].[UnitMeasure_Insert]
(
	@UnitMeasureCode NCHAR(3),
	@Name NAME,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Production].[UnitMeasure]
	(
		[UnitMeasureCode],
		[Name],
		[ModifiedDate]
	)
	VALUES
	(
		@UnitMeasureCode,
		@Name,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[UnitMeasure_Update]') IS NOT NULL DROP PROCEDURE [Production].[UnitMeasure_Update]
GO
CREATE PROCEDURE [Production].[UnitMeasure_Update]
(
	@UnitMeasureCode NCHAR(3),
	@Name NAME,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Production].[UnitMeasure] SET
		[UnitMeasureCode] = @UnitMeasureCode,
		[Name] = @Name,
		[ModifiedDate] = @ModifiedDate
	WHERE
		UnitMeasureCode = @UnitMeasureCode

GO



--*****************************************************************************
--	Stored procedures for [Production].[WorkOrder]
--*****************************************************************************
 
IF OBJECT_ID('[Production].[WorkOrder_List]') IS NOT NULL DROP PROCEDURE [Production].[WorkOrder_List]
GO
CREATE PROCEDURE [Production].[WorkOrder_List]
AS
	SELECT
		[WorkOrderID],
		[ProductID],
		[OrderQty],
		[StockedQty],
		[ScrappedQty],
		[StartDate],
		[EndDate],
		[DueDate],
		[ScrapReasonID],
		[ModifiedDate]
	FROM [Production].[WorkOrder]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[WorkOrder_Insert]') IS NOT NULL DROP PROCEDURE [Production].[WorkOrder_Insert]
GO
CREATE PROCEDURE [Production].[WorkOrder_Insert]
(
	@ProductID INT,
	@OrderQty INT,
	@StockedQty INT,
	@ScrappedQty SMALLINT,
	@StartDate DATETIME,
	@EndDate DATETIME,
	@DueDate DATETIME,
	@ScrapReasonID SMALLINT,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Production].[WorkOrder]
	(
		[ProductID],
		[OrderQty],
		[ScrappedQty],
		[StartDate],
		[EndDate],
		[DueDate],
		[ScrapReasonID],
		[ModifiedDate]
	)
	VALUES
	(
		@ProductID,
		@OrderQty,
		@ScrappedQty,
		@StartDate,
		@EndDate,
		@DueDate,
		@ScrapReasonID,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[WorkOrder_Update]') IS NOT NULL DROP PROCEDURE [Production].[WorkOrder_Update]
GO
CREATE PROCEDURE [Production].[WorkOrder_Update]
(
	@WorkOrderID INT,
	@ProductID INT,
	@OrderQty INT,
	@StockedQty INT,
	@ScrappedQty SMALLINT,
	@StartDate DATETIME,
	@EndDate DATETIME,
	@DueDate DATETIME,
	@ScrapReasonID SMALLINT,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Production].[WorkOrder] SET
		[ProductID] = @ProductID,
		[OrderQty] = @OrderQty,
		[ScrappedQty] = @ScrappedQty,
		[StartDate] = @StartDate,
		[EndDate] = @EndDate,
		[DueDate] = @DueDate,
		[ScrapReasonID] = @ScrapReasonID,
		[ModifiedDate] = @ModifiedDate
	WHERE
		WorkOrderID = @WorkOrderID

GO



--*****************************************************************************
--	Stored procedures for [Production].[WorkOrderRouting]
--*****************************************************************************
 
IF OBJECT_ID('[Production].[WorkOrderRouting_List]') IS NOT NULL DROP PROCEDURE [Production].[WorkOrderRouting_List]
GO
CREATE PROCEDURE [Production].[WorkOrderRouting_List]
AS
	SELECT
		[WorkOrderID],
		[ProductID],
		[OperationSequence],
		[LocationID],
		[ScheduledStartDate],
		[ScheduledEndDate],
		[ActualStartDate],
		[ActualEndDate],
		[ActualResourceHrs],
		[PlannedCost],
		[ActualCost],
		[ModifiedDate]
	FROM [Production].[WorkOrderRouting]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[WorkOrderRouting_Insert]') IS NOT NULL DROP PROCEDURE [Production].[WorkOrderRouting_Insert]
GO
CREATE PROCEDURE [Production].[WorkOrderRouting_Insert]
(
	@WorkOrderID INT,
	@ProductID INT,
	@OperationSequence SMALLINT,
	@LocationID SMALLINT,
	@ScheduledStartDate DATETIME,
	@ScheduledEndDate DATETIME,
	@ActualStartDate DATETIME,
	@ActualEndDate DATETIME,
	@ActualResourceHrs DECIMAL,
	@PlannedCost MONEY,
	@ActualCost MONEY,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Production].[WorkOrderRouting]
	(
		[WorkOrderID],
		[ProductID],
		[OperationSequence],
		[LocationID],
		[ScheduledStartDate],
		[ScheduledEndDate],
		[ActualStartDate],
		[ActualEndDate],
		[ActualResourceHrs],
		[PlannedCost],
		[ActualCost],
		[ModifiedDate]
	)
	VALUES
	(
		@WorkOrderID,
		@ProductID,
		@OperationSequence,
		@LocationID,
		@ScheduledStartDate,
		@ScheduledEndDate,
		@ActualStartDate,
		@ActualEndDate,
		@ActualResourceHrs,
		@PlannedCost,
		@ActualCost,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Production].[WorkOrderRouting_Update]') IS NOT NULL DROP PROCEDURE [Production].[WorkOrderRouting_Update]
GO
CREATE PROCEDURE [Production].[WorkOrderRouting_Update]
(
	@WorkOrderID INT,
	@ProductID INT,
	@OperationSequence SMALLINT,
	@LocationID SMALLINT,
	@ScheduledStartDate DATETIME,
	@ScheduledEndDate DATETIME,
	@ActualStartDate DATETIME,
	@ActualEndDate DATETIME,
	@ActualResourceHrs DECIMAL,
	@PlannedCost MONEY,
	@ActualCost MONEY,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Production].[WorkOrderRouting] SET
		[WorkOrderID] = @WorkOrderID,
		[ProductID] = @ProductID,
		[OperationSequence] = @OperationSequence,
		[LocationID] = @LocationID,
		[ScheduledStartDate] = @ScheduledStartDate,
		[ScheduledEndDate] = @ScheduledEndDate,
		[ActualStartDate] = @ActualStartDate,
		[ActualEndDate] = @ActualEndDate,
		[ActualResourceHrs] = @ActualResourceHrs,
		[PlannedCost] = @PlannedCost,
		[ActualCost] = @ActualCost,
		[ModifiedDate] = @ModifiedDate
	WHERE
		WorkOrderID = @WorkOrderID AND
		ProductID = @ProductID AND
		OperationSequence = @OperationSequence

GO



--*****************************************************************************
--	Stored procedures for [Purchasing].[ProductVendor]
--*****************************************************************************
 
IF OBJECT_ID('[Purchasing].[ProductVendor_List]') IS NOT NULL DROP PROCEDURE [Purchasing].[ProductVendor_List]
GO
CREATE PROCEDURE [Purchasing].[ProductVendor_List]
AS
	SELECT
		[ProductID],
		[VendorID],
		[AverageLeadTime],
		[StandardPrice],
		[LastReceiptCost],
		[LastReceiptDate],
		[MinOrderQty],
		[MaxOrderQty],
		[OnOrderQty],
		[UnitMeasureCode],
		[ModifiedDate]
	FROM [Purchasing].[ProductVendor]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Purchasing].[ProductVendor_Insert]') IS NOT NULL DROP PROCEDURE [Purchasing].[ProductVendor_Insert]
GO
CREATE PROCEDURE [Purchasing].[ProductVendor_Insert]
(
	@ProductID INT,
	@VendorID INT,
	@AverageLeadTime INT,
	@StandardPrice MONEY,
	@LastReceiptCost MONEY,
	@LastReceiptDate DATETIME,
	@MinOrderQty INT,
	@MaxOrderQty INT,
	@OnOrderQty INT,
	@UnitMeasureCode NCHAR(3),
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Purchasing].[ProductVendor]
	(
		[ProductID],
		[VendorID],
		[AverageLeadTime],
		[StandardPrice],
		[LastReceiptCost],
		[LastReceiptDate],
		[MinOrderQty],
		[MaxOrderQty],
		[OnOrderQty],
		[UnitMeasureCode],
		[ModifiedDate]
	)
	VALUES
	(
		@ProductID,
		@VendorID,
		@AverageLeadTime,
		@StandardPrice,
		@LastReceiptCost,
		@LastReceiptDate,
		@MinOrderQty,
		@MaxOrderQty,
		@OnOrderQty,
		@UnitMeasureCode,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Purchasing].[ProductVendor_Update]') IS NOT NULL DROP PROCEDURE [Purchasing].[ProductVendor_Update]
GO
CREATE PROCEDURE [Purchasing].[ProductVendor_Update]
(
	@ProductID INT,
	@VendorID INT,
	@AverageLeadTime INT,
	@StandardPrice MONEY,
	@LastReceiptCost MONEY,
	@LastReceiptDate DATETIME,
	@MinOrderQty INT,
	@MaxOrderQty INT,
	@OnOrderQty INT,
	@UnitMeasureCode NCHAR(3),
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Purchasing].[ProductVendor] SET
		[ProductID] = @ProductID,
		[VendorID] = @VendorID,
		[AverageLeadTime] = @AverageLeadTime,
		[StandardPrice] = @StandardPrice,
		[LastReceiptCost] = @LastReceiptCost,
		[LastReceiptDate] = @LastReceiptDate,
		[MinOrderQty] = @MinOrderQty,
		[MaxOrderQty] = @MaxOrderQty,
		[OnOrderQty] = @OnOrderQty,
		[UnitMeasureCode] = @UnitMeasureCode,
		[ModifiedDate] = @ModifiedDate
	WHERE
		ProductID = @ProductID AND
		VendorID = @VendorID

GO



--*****************************************************************************
--	Stored procedures for [Purchasing].[PurchaseOrderDetail]
--*****************************************************************************
 
IF OBJECT_ID('[Purchasing].[PurchaseOrderDetail_List]') IS NOT NULL DROP PROCEDURE [Purchasing].[PurchaseOrderDetail_List]
GO
CREATE PROCEDURE [Purchasing].[PurchaseOrderDetail_List]
AS
	SELECT
		[PurchaseOrderID],
		[PurchaseOrderDetailID],
		[DueDate],
		[OrderQty],
		[ProductID],
		[UnitPrice],
		[LineTotal],
		[ReceivedQty],
		[RejectedQty],
		[StockedQty],
		[ModifiedDate]
	FROM [Purchasing].[PurchaseOrderDetail]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Purchasing].[PurchaseOrderDetail_Insert]') IS NOT NULL DROP PROCEDURE [Purchasing].[PurchaseOrderDetail_Insert]
GO
CREATE PROCEDURE [Purchasing].[PurchaseOrderDetail_Insert]
(
	@PurchaseOrderID INT,
	@DueDate DATETIME,
	@OrderQty SMALLINT,
	@ProductID INT,
	@UnitPrice MONEY,
	@LineTotal MONEY,
	@ReceivedQty DECIMAL,
	@RejectedQty DECIMAL,
	@StockedQty DECIMAL,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Purchasing].[PurchaseOrderDetail]
	(
		[PurchaseOrderID],
		[DueDate],
		[OrderQty],
		[ProductID],
		[UnitPrice],
		[ReceivedQty],
		[RejectedQty],
		[ModifiedDate]
	)
	VALUES
	(
		@PurchaseOrderID,
		@DueDate,
		@OrderQty,
		@ProductID,
		@UnitPrice,
		@ReceivedQty,
		@RejectedQty,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Purchasing].[PurchaseOrderDetail_Update]') IS NOT NULL DROP PROCEDURE [Purchasing].[PurchaseOrderDetail_Update]
GO
CREATE PROCEDURE [Purchasing].[PurchaseOrderDetail_Update]
(
	@PurchaseOrderID INT,
	@PurchaseOrderDetailID INT,
	@DueDate DATETIME,
	@OrderQty SMALLINT,
	@ProductID INT,
	@UnitPrice MONEY,
	@LineTotal MONEY,
	@ReceivedQty DECIMAL,
	@RejectedQty DECIMAL,
	@StockedQty DECIMAL,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Purchasing].[PurchaseOrderDetail] SET
		[PurchaseOrderID] = @PurchaseOrderID,
		[DueDate] = @DueDate,
		[OrderQty] = @OrderQty,
		[ProductID] = @ProductID,
		[UnitPrice] = @UnitPrice,
		[ReceivedQty] = @ReceivedQty,
		[RejectedQty] = @RejectedQty,
		[ModifiedDate] = @ModifiedDate
	WHERE
		PurchaseOrderID = @PurchaseOrderID AND
		PurchaseOrderDetailID = @PurchaseOrderDetailID

GO



--*****************************************************************************
--	Stored procedures for [Purchasing].[PurchaseOrderHeader]
--*****************************************************************************
 
IF OBJECT_ID('[Purchasing].[PurchaseOrderHeader_List]') IS NOT NULL DROP PROCEDURE [Purchasing].[PurchaseOrderHeader_List]
GO
CREATE PROCEDURE [Purchasing].[PurchaseOrderHeader_List]
AS
	SELECT
		[PurchaseOrderID],
		[RevisionNumber],
		[Status],
		[EmployeeID],
		[VendorID],
		[ShipMethodID],
		[OrderDate],
		[ShipDate],
		[SubTotal],
		[TaxAmt],
		[Freight],
		[TotalDue],
		[ModifiedDate]
	FROM [Purchasing].[PurchaseOrderHeader]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Purchasing].[PurchaseOrderHeader_Insert]') IS NOT NULL DROP PROCEDURE [Purchasing].[PurchaseOrderHeader_Insert]
GO
CREATE PROCEDURE [Purchasing].[PurchaseOrderHeader_Insert]
(
	@RevisionNumber TINYINT,
	@Status TINYINT,
	@EmployeeID INT,
	@VendorID INT,
	@ShipMethodID INT,
	@OrderDate DATETIME,
	@ShipDate DATETIME,
	@SubTotal MONEY,
	@TaxAmt MONEY,
	@Freight MONEY,
	@TotalDue MONEY,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Purchasing].[PurchaseOrderHeader]
	(
		[RevisionNumber],
		[Status],
		[EmployeeID],
		[VendorID],
		[ShipMethodID],
		[OrderDate],
		[ShipDate],
		[SubTotal],
		[TaxAmt],
		[Freight],
		[ModifiedDate]
	)
	VALUES
	(
		@RevisionNumber,
		@Status,
		@EmployeeID,
		@VendorID,
		@ShipMethodID,
		@OrderDate,
		@ShipDate,
		@SubTotal,
		@TaxAmt,
		@Freight,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Purchasing].[PurchaseOrderHeader_Update]') IS NOT NULL DROP PROCEDURE [Purchasing].[PurchaseOrderHeader_Update]
GO
CREATE PROCEDURE [Purchasing].[PurchaseOrderHeader_Update]
(
	@PurchaseOrderID INT,
	@RevisionNumber TINYINT,
	@Status TINYINT,
	@EmployeeID INT,
	@VendorID INT,
	@ShipMethodID INT,
	@OrderDate DATETIME,
	@ShipDate DATETIME,
	@SubTotal MONEY,
	@TaxAmt MONEY,
	@Freight MONEY,
	@TotalDue MONEY,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Purchasing].[PurchaseOrderHeader] SET
		[RevisionNumber] = @RevisionNumber,
		[Status] = @Status,
		[EmployeeID] = @EmployeeID,
		[VendorID] = @VendorID,
		[ShipMethodID] = @ShipMethodID,
		[OrderDate] = @OrderDate,
		[ShipDate] = @ShipDate,
		[SubTotal] = @SubTotal,
		[TaxAmt] = @TaxAmt,
		[Freight] = @Freight,
		[ModifiedDate] = @ModifiedDate
	WHERE
		PurchaseOrderID = @PurchaseOrderID

GO



--*****************************************************************************
--	Stored procedures for [Purchasing].[ShipMethod]
--*****************************************************************************
 
IF OBJECT_ID('[Purchasing].[ShipMethod_List]') IS NOT NULL DROP PROCEDURE [Purchasing].[ShipMethod_List]
GO
CREATE PROCEDURE [Purchasing].[ShipMethod_List]
AS
	SELECT
		[ShipMethodID],
		[Name],
		[ShipBase],
		[ShipRate],
		[rowguid],
		[ModifiedDate]
	FROM [Purchasing].[ShipMethod]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Purchasing].[ShipMethod_Insert]') IS NOT NULL DROP PROCEDURE [Purchasing].[ShipMethod_Insert]
GO
CREATE PROCEDURE [Purchasing].[ShipMethod_Insert]
(
	@Name NAME,
	@ShipBase MONEY,
	@ShipRate MONEY,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Purchasing].[ShipMethod]
	(
		[Name],
		[ShipBase],
		[ShipRate],
		[rowguid],
		[ModifiedDate]
	)
	VALUES
	(
		@Name,
		@ShipBase,
		@ShipRate,
		@rowguid,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Purchasing].[ShipMethod_Update]') IS NOT NULL DROP PROCEDURE [Purchasing].[ShipMethod_Update]
GO
CREATE PROCEDURE [Purchasing].[ShipMethod_Update]
(
	@ShipMethodID INT,
	@Name NAME,
	@ShipBase MONEY,
	@ShipRate MONEY,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Purchasing].[ShipMethod] SET
		[Name] = @Name,
		[ShipBase] = @ShipBase,
		[ShipRate] = @ShipRate,
		[rowguid] = @rowguid,
		[ModifiedDate] = @ModifiedDate
	WHERE
		ShipMethodID = @ShipMethodID

GO



--*****************************************************************************
--	Stored procedures for [Purchasing].[Vendor]
--*****************************************************************************
 
IF OBJECT_ID('[Purchasing].[Vendor_List]') IS NOT NULL DROP PROCEDURE [Purchasing].[Vendor_List]
GO
CREATE PROCEDURE [Purchasing].[Vendor_List]
AS
	SELECT
		[VendorID],
		[AccountNumber],
		[Name],
		[CreditRating],
		[PreferredVendorStatus],
		[ActiveFlag],
		[PurchasingWebServiceURL],
		[ModifiedDate]
	FROM [Purchasing].[Vendor]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Purchasing].[Vendor_Insert]') IS NOT NULL DROP PROCEDURE [Purchasing].[Vendor_Insert]
GO
CREATE PROCEDURE [Purchasing].[Vendor_Insert]
(
	@AccountNumber ACCOUNTNUMBER,
	@Name NAME,
	@CreditRating TINYINT,
	@PreferredVendorStatus FLAG,
	@ActiveFlag FLAG,
	@PurchasingWebServiceURL NVARCHAR(1024),
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Purchasing].[Vendor]
	(
		[AccountNumber],
		[Name],
		[CreditRating],
		[PreferredVendorStatus],
		[ActiveFlag],
		[PurchasingWebServiceURL],
		[ModifiedDate]
	)
	VALUES
	(
		@AccountNumber,
		@Name,
		@CreditRating,
		@PreferredVendorStatus,
		@ActiveFlag,
		@PurchasingWebServiceURL,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Purchasing].[Vendor_Update]') IS NOT NULL DROP PROCEDURE [Purchasing].[Vendor_Update]
GO
CREATE PROCEDURE [Purchasing].[Vendor_Update]
(
	@VendorID INT,
	@AccountNumber ACCOUNTNUMBER,
	@Name NAME,
	@CreditRating TINYINT,
	@PreferredVendorStatus FLAG,
	@ActiveFlag FLAG,
	@PurchasingWebServiceURL NVARCHAR(1024),
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Purchasing].[Vendor] SET
		[AccountNumber] = @AccountNumber,
		[Name] = @Name,
		[CreditRating] = @CreditRating,
		[PreferredVendorStatus] = @PreferredVendorStatus,
		[ActiveFlag] = @ActiveFlag,
		[PurchasingWebServiceURL] = @PurchasingWebServiceURL,
		[ModifiedDate] = @ModifiedDate
	WHERE
		VendorID = @VendorID

GO



--*****************************************************************************
--	Stored procedures for [Purchasing].[VendorAddress]
--*****************************************************************************
 
IF OBJECT_ID('[Purchasing].[VendorAddress_List]') IS NOT NULL DROP PROCEDURE [Purchasing].[VendorAddress_List]
GO
CREATE PROCEDURE [Purchasing].[VendorAddress_List]
AS
	SELECT
		[VendorID],
		[AddressID],
		[AddressTypeID],
		[ModifiedDate]
	FROM [Purchasing].[VendorAddress]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Purchasing].[VendorAddress_Insert]') IS NOT NULL DROP PROCEDURE [Purchasing].[VendorAddress_Insert]
GO
CREATE PROCEDURE [Purchasing].[VendorAddress_Insert]
(
	@VendorID INT,
	@AddressID INT,
	@AddressTypeID INT,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Purchasing].[VendorAddress]
	(
		[VendorID],
		[AddressID],
		[AddressTypeID],
		[ModifiedDate]
	)
	VALUES
	(
		@VendorID,
		@AddressID,
		@AddressTypeID,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Purchasing].[VendorAddress_Update]') IS NOT NULL DROP PROCEDURE [Purchasing].[VendorAddress_Update]
GO
CREATE PROCEDURE [Purchasing].[VendorAddress_Update]
(
	@VendorID INT,
	@AddressID INT,
	@AddressTypeID INT,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Purchasing].[VendorAddress] SET
		[VendorID] = @VendorID,
		[AddressID] = @AddressID,
		[AddressTypeID] = @AddressTypeID,
		[ModifiedDate] = @ModifiedDate
	WHERE
		VendorID = @VendorID AND
		AddressID = @AddressID

GO



--*****************************************************************************
--	Stored procedures for [Purchasing].[VendorContact]
--*****************************************************************************
 
IF OBJECT_ID('[Purchasing].[VendorContact_List]') IS NOT NULL DROP PROCEDURE [Purchasing].[VendorContact_List]
GO
CREATE PROCEDURE [Purchasing].[VendorContact_List]
AS
	SELECT
		[VendorID],
		[ContactID],
		[ContactTypeID],
		[ModifiedDate]
	FROM [Purchasing].[VendorContact]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Purchasing].[VendorContact_Insert]') IS NOT NULL DROP PROCEDURE [Purchasing].[VendorContact_Insert]
GO
CREATE PROCEDURE [Purchasing].[VendorContact_Insert]
(
	@VendorID INT,
	@ContactID INT,
	@ContactTypeID INT,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Purchasing].[VendorContact]
	(
		[VendorID],
		[ContactID],
		[ContactTypeID],
		[ModifiedDate]
	)
	VALUES
	(
		@VendorID,
		@ContactID,
		@ContactTypeID,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Purchasing].[VendorContact_Update]') IS NOT NULL DROP PROCEDURE [Purchasing].[VendorContact_Update]
GO
CREATE PROCEDURE [Purchasing].[VendorContact_Update]
(
	@VendorID INT,
	@ContactID INT,
	@ContactTypeID INT,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Purchasing].[VendorContact] SET
		[VendorID] = @VendorID,
		[ContactID] = @ContactID,
		[ContactTypeID] = @ContactTypeID,
		[ModifiedDate] = @ModifiedDate
	WHERE
		VendorID = @VendorID AND
		ContactID = @ContactID

GO



--*****************************************************************************
--	Stored procedures for [Sales].[ContactCreditCard]
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[ContactCreditCard_List]') IS NOT NULL DROP PROCEDURE [Sales].[ContactCreditCard_List]
GO
CREATE PROCEDURE [Sales].[ContactCreditCard_List]
AS
	SELECT
		[ContactID],
		[CreditCardID],
		[ModifiedDate]
	FROM [Sales].[ContactCreditCard]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[ContactCreditCard_Insert]') IS NOT NULL DROP PROCEDURE [Sales].[ContactCreditCard_Insert]
GO
CREATE PROCEDURE [Sales].[ContactCreditCard_Insert]
(
	@ContactID INT,
	@CreditCardID INT,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Sales].[ContactCreditCard]
	(
		[ContactID],
		[CreditCardID],
		[ModifiedDate]
	)
	VALUES
	(
		@ContactID,
		@CreditCardID,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[ContactCreditCard_Update]') IS NOT NULL DROP PROCEDURE [Sales].[ContactCreditCard_Update]
GO
CREATE PROCEDURE [Sales].[ContactCreditCard_Update]
(
	@ContactID INT,
	@CreditCardID INT,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Sales].[ContactCreditCard] SET
		[ContactID] = @ContactID,
		[CreditCardID] = @CreditCardID,
		[ModifiedDate] = @ModifiedDate
	WHERE
		ContactID = @ContactID AND
		CreditCardID = @CreditCardID

GO



--*****************************************************************************
--	Stored procedures for [Sales].[CountryRegionCurrency]
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[CountryRegionCurrency_List]') IS NOT NULL DROP PROCEDURE [Sales].[CountryRegionCurrency_List]
GO
CREATE PROCEDURE [Sales].[CountryRegionCurrency_List]
AS
	SELECT
		[CountryRegionCode],
		[CurrencyCode],
		[ModifiedDate]
	FROM [Sales].[CountryRegionCurrency]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[CountryRegionCurrency_Insert]') IS NOT NULL DROP PROCEDURE [Sales].[CountryRegionCurrency_Insert]
GO
CREATE PROCEDURE [Sales].[CountryRegionCurrency_Insert]
(
	@CountryRegionCode NVARCHAR(3),
	@CurrencyCode NCHAR(3),
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Sales].[CountryRegionCurrency]
	(
		[CountryRegionCode],
		[CurrencyCode],
		[ModifiedDate]
	)
	VALUES
	(
		@CountryRegionCode,
		@CurrencyCode,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[CountryRegionCurrency_Update]') IS NOT NULL DROP PROCEDURE [Sales].[CountryRegionCurrency_Update]
GO
CREATE PROCEDURE [Sales].[CountryRegionCurrency_Update]
(
	@CountryRegionCode NVARCHAR(3),
	@CurrencyCode NCHAR(3),
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Sales].[CountryRegionCurrency] SET
		[CountryRegionCode] = @CountryRegionCode,
		[CurrencyCode] = @CurrencyCode,
		[ModifiedDate] = @ModifiedDate
	WHERE
		CountryRegionCode = @CountryRegionCode AND
		CurrencyCode = @CurrencyCode

GO



--*****************************************************************************
--	Stored procedures for [Sales].[CreditCard]
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[CreditCard_List]') IS NOT NULL DROP PROCEDURE [Sales].[CreditCard_List]
GO
CREATE PROCEDURE [Sales].[CreditCard_List]
AS
	SELECT
		[CreditCardID],
		[CardType],
		[CardNumber],
		[ExpMonth],
		[ExpYear],
		[ModifiedDate]
	FROM [Sales].[CreditCard]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[CreditCard_Insert]') IS NOT NULL DROP PROCEDURE [Sales].[CreditCard_Insert]
GO
CREATE PROCEDURE [Sales].[CreditCard_Insert]
(
	@CardType NVARCHAR(50),
	@CardNumber NVARCHAR(25),
	@ExpMonth TINYINT,
	@ExpYear SMALLINT,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Sales].[CreditCard]
	(
		[CardType],
		[CardNumber],
		[ExpMonth],
		[ExpYear],
		[ModifiedDate]
	)
	VALUES
	(
		@CardType,
		@CardNumber,
		@ExpMonth,
		@ExpYear,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[CreditCard_Update]') IS NOT NULL DROP PROCEDURE [Sales].[CreditCard_Update]
GO
CREATE PROCEDURE [Sales].[CreditCard_Update]
(
	@CreditCardID INT,
	@CardType NVARCHAR(50),
	@CardNumber NVARCHAR(25),
	@ExpMonth TINYINT,
	@ExpYear SMALLINT,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Sales].[CreditCard] SET
		[CardType] = @CardType,
		[CardNumber] = @CardNumber,
		[ExpMonth] = @ExpMonth,
		[ExpYear] = @ExpYear,
		[ModifiedDate] = @ModifiedDate
	WHERE
		CreditCardID = @CreditCardID

GO



--*****************************************************************************
--	Stored procedures for [Sales].[Currency]
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[Currency_List]') IS NOT NULL DROP PROCEDURE [Sales].[Currency_List]
GO
CREATE PROCEDURE [Sales].[Currency_List]
AS
	SELECT
		[CurrencyCode],
		[Name],
		[ModifiedDate]
	FROM [Sales].[Currency]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[Currency_Insert]') IS NOT NULL DROP PROCEDURE [Sales].[Currency_Insert]
GO
CREATE PROCEDURE [Sales].[Currency_Insert]
(
	@CurrencyCode NCHAR(3),
	@Name NAME,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Sales].[Currency]
	(
		[CurrencyCode],
		[Name],
		[ModifiedDate]
	)
	VALUES
	(
		@CurrencyCode,
		@Name,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[Currency_Update]') IS NOT NULL DROP PROCEDURE [Sales].[Currency_Update]
GO
CREATE PROCEDURE [Sales].[Currency_Update]
(
	@CurrencyCode NCHAR(3),
	@Name NAME,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Sales].[Currency] SET
		[CurrencyCode] = @CurrencyCode,
		[Name] = @Name,
		[ModifiedDate] = @ModifiedDate
	WHERE
		CurrencyCode = @CurrencyCode

GO



--*****************************************************************************
--	Stored procedures for [Sales].[CurrencyRate]
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[CurrencyRate_List]') IS NOT NULL DROP PROCEDURE [Sales].[CurrencyRate_List]
GO
CREATE PROCEDURE [Sales].[CurrencyRate_List]
AS
	SELECT
		[CurrencyRateID],
		[CurrencyRateDate],
		[FromCurrencyCode],
		[ToCurrencyCode],
		[AverageRate],
		[EndOfDayRate],
		[ModifiedDate]
	FROM [Sales].[CurrencyRate]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[CurrencyRate_Insert]') IS NOT NULL DROP PROCEDURE [Sales].[CurrencyRate_Insert]
GO
CREATE PROCEDURE [Sales].[CurrencyRate_Insert]
(
	@CurrencyRateDate DATETIME,
	@FromCurrencyCode NCHAR(3),
	@ToCurrencyCode NCHAR(3),
	@AverageRate MONEY,
	@EndOfDayRate MONEY,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Sales].[CurrencyRate]
	(
		[CurrencyRateDate],
		[FromCurrencyCode],
		[ToCurrencyCode],
		[AverageRate],
		[EndOfDayRate],
		[ModifiedDate]
	)
	VALUES
	(
		@CurrencyRateDate,
		@FromCurrencyCode,
		@ToCurrencyCode,
		@AverageRate,
		@EndOfDayRate,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[CurrencyRate_Update]') IS NOT NULL DROP PROCEDURE [Sales].[CurrencyRate_Update]
GO
CREATE PROCEDURE [Sales].[CurrencyRate_Update]
(
	@CurrencyRateID INT,
	@CurrencyRateDate DATETIME,
	@FromCurrencyCode NCHAR(3),
	@ToCurrencyCode NCHAR(3),
	@AverageRate MONEY,
	@EndOfDayRate MONEY,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Sales].[CurrencyRate] SET
		[CurrencyRateDate] = @CurrencyRateDate,
		[FromCurrencyCode] = @FromCurrencyCode,
		[ToCurrencyCode] = @ToCurrencyCode,
		[AverageRate] = @AverageRate,
		[EndOfDayRate] = @EndOfDayRate,
		[ModifiedDate] = @ModifiedDate
	WHERE
		CurrencyRateID = @CurrencyRateID

GO



--*****************************************************************************
--	Stored procedures for [Sales].[Customer]
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[Customer_List]') IS NOT NULL DROP PROCEDURE [Sales].[Customer_List]
GO
CREATE PROCEDURE [Sales].[Customer_List]
AS
	SELECT
		[CustomerID],
		[TerritoryID],
		[AccountNumber],
		[CustomerType],
		[rowguid],
		[ModifiedDate]
	FROM [Sales].[Customer]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[Customer_Insert]') IS NOT NULL DROP PROCEDURE [Sales].[Customer_Insert]
GO
CREATE PROCEDURE [Sales].[Customer_Insert]
(
	@TerritoryID INT,
	@AccountNumber VARCHAR(10),
	@CustomerType NCHAR(1),
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Sales].[Customer]
	(
		[TerritoryID],
		[CustomerType],
		[rowguid],
		[ModifiedDate]
	)
	VALUES
	(
		@TerritoryID,
		@CustomerType,
		@rowguid,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[Customer_Update]') IS NOT NULL DROP PROCEDURE [Sales].[Customer_Update]
GO
CREATE PROCEDURE [Sales].[Customer_Update]
(
	@CustomerID INT,
	@TerritoryID INT,
	@AccountNumber VARCHAR(10),
	@CustomerType NCHAR(1),
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Sales].[Customer] SET
		[TerritoryID] = @TerritoryID,
		[CustomerType] = @CustomerType,
		[rowguid] = @rowguid,
		[ModifiedDate] = @ModifiedDate
	WHERE
		CustomerID = @CustomerID

GO



--*****************************************************************************
--	Stored procedures for [Sales].[CustomerAddress]
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[CustomerAddress_List]') IS NOT NULL DROP PROCEDURE [Sales].[CustomerAddress_List]
GO
CREATE PROCEDURE [Sales].[CustomerAddress_List]
AS
	SELECT
		[CustomerID],
		[AddressID],
		[AddressTypeID],
		[rowguid],
		[ModifiedDate]
	FROM [Sales].[CustomerAddress]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[CustomerAddress_Insert]') IS NOT NULL DROP PROCEDURE [Sales].[CustomerAddress_Insert]
GO
CREATE PROCEDURE [Sales].[CustomerAddress_Insert]
(
	@CustomerID INT,
	@AddressID INT,
	@AddressTypeID INT,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Sales].[CustomerAddress]
	(
		[CustomerID],
		[AddressID],
		[AddressTypeID],
		[rowguid],
		[ModifiedDate]
	)
	VALUES
	(
		@CustomerID,
		@AddressID,
		@AddressTypeID,
		@rowguid,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[CustomerAddress_Update]') IS NOT NULL DROP PROCEDURE [Sales].[CustomerAddress_Update]
GO
CREATE PROCEDURE [Sales].[CustomerAddress_Update]
(
	@CustomerID INT,
	@AddressID INT,
	@AddressTypeID INT,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Sales].[CustomerAddress] SET
		[CustomerID] = @CustomerID,
		[AddressID] = @AddressID,
		[AddressTypeID] = @AddressTypeID,
		[rowguid] = @rowguid,
		[ModifiedDate] = @ModifiedDate
	WHERE
		CustomerID = @CustomerID AND
		AddressID = @AddressID

GO



--*****************************************************************************
--	Stored procedures for [Sales].[Individual]
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[Individual_List]') IS NOT NULL DROP PROCEDURE [Sales].[Individual_List]
GO
CREATE PROCEDURE [Sales].[Individual_List]
AS
	SELECT
		[CustomerID],
		[ContactID],
		[Demographics],
		[ModifiedDate]
	FROM [Sales].[Individual]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[Individual_Insert]') IS NOT NULL DROP PROCEDURE [Sales].[Individual_Insert]
GO
CREATE PROCEDURE [Sales].[Individual_Insert]
(
	@CustomerID INT,
	@ContactID INT,
	@Demographics XML,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Sales].[Individual]
	(
		[CustomerID],
		[ContactID],
		[Demographics],
		[ModifiedDate]
	)
	VALUES
	(
		@CustomerID,
		@ContactID,
		@Demographics,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[Individual_Update]') IS NOT NULL DROP PROCEDURE [Sales].[Individual_Update]
GO
CREATE PROCEDURE [Sales].[Individual_Update]
(
	@CustomerID INT,
	@ContactID INT,
	@Demographics XML,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Sales].[Individual] SET
		[CustomerID] = @CustomerID,
		[ContactID] = @ContactID,
		[Demographics] = @Demographics,
		[ModifiedDate] = @ModifiedDate
	WHERE
		CustomerID = @CustomerID

GO



--*****************************************************************************
--	Stored procedures for [Sales].[SalesOrderDetail]
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SalesOrderDetail_List]') IS NOT NULL DROP PROCEDURE [Sales].[SalesOrderDetail_List]
GO
CREATE PROCEDURE [Sales].[SalesOrderDetail_List]
AS
	SELECT
		[SalesOrderID],
		[SalesOrderDetailID],
		[CarrierTrackingNumber],
		[OrderQty],
		[ProductID],
		[SpecialOfferID],
		[UnitPrice],
		[UnitPriceDiscount],
		[LineTotal],
		[rowguid],
		[ModifiedDate]
	FROM [Sales].[SalesOrderDetail]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SalesOrderDetail_Insert]') IS NOT NULL DROP PROCEDURE [Sales].[SalesOrderDetail_Insert]
GO
CREATE PROCEDURE [Sales].[SalesOrderDetail_Insert]
(
	@SalesOrderID INT,
	@CarrierTrackingNumber NVARCHAR(25),
	@OrderQty SMALLINT,
	@ProductID INT,
	@SpecialOfferID INT,
	@UnitPrice MONEY,
	@UnitPriceDiscount MONEY,
	@LineTotal NUMERIC,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Sales].[SalesOrderDetail]
	(
		[SalesOrderID],
		[CarrierTrackingNumber],
		[OrderQty],
		[ProductID],
		[SpecialOfferID],
		[UnitPrice],
		[UnitPriceDiscount],
		[rowguid],
		[ModifiedDate]
	)
	VALUES
	(
		@SalesOrderID,
		@CarrierTrackingNumber,
		@OrderQty,
		@ProductID,
		@SpecialOfferID,
		@UnitPrice,
		@UnitPriceDiscount,
		@rowguid,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SalesOrderDetail_Update]') IS NOT NULL DROP PROCEDURE [Sales].[SalesOrderDetail_Update]
GO
CREATE PROCEDURE [Sales].[SalesOrderDetail_Update]
(
	@SalesOrderID INT,
	@SalesOrderDetailID INT,
	@CarrierTrackingNumber NVARCHAR(25),
	@OrderQty SMALLINT,
	@ProductID INT,
	@SpecialOfferID INT,
	@UnitPrice MONEY,
	@UnitPriceDiscount MONEY,
	@LineTotal NUMERIC,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Sales].[SalesOrderDetail] SET
		[SalesOrderID] = @SalesOrderID,
		[CarrierTrackingNumber] = @CarrierTrackingNumber,
		[OrderQty] = @OrderQty,
		[ProductID] = @ProductID,
		[SpecialOfferID] = @SpecialOfferID,
		[UnitPrice] = @UnitPrice,
		[UnitPriceDiscount] = @UnitPriceDiscount,
		[rowguid] = @rowguid,
		[ModifiedDate] = @ModifiedDate
	WHERE
		SalesOrderID = @SalesOrderID AND
		SalesOrderDetailID = @SalesOrderDetailID

GO



--*****************************************************************************
--	Stored procedures for [Sales].[SalesOrderHeader]
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SalesOrderHeader_List]') IS NOT NULL DROP PROCEDURE [Sales].[SalesOrderHeader_List]
GO
CREATE PROCEDURE [Sales].[SalesOrderHeader_List]
AS
	SELECT
		[SalesOrderID],
		[RevisionNumber],
		[OrderDate],
		[DueDate],
		[ShipDate],
		[Status],
		[OnlineOrderFlag],
		[SalesOrderNumber],
		[PurchaseOrderNumber],
		[AccountNumber],
		[CustomerID],
		[ContactID],
		[SalesPersonID],
		[TerritoryID],
		[BillToAddressID],
		[ShipToAddressID],
		[ShipMethodID],
		[CreditCardID],
		[CreditCardApprovalCode],
		[CurrencyRateID],
		[SubTotal],
		[TaxAmt],
		[Freight],
		[TotalDue],
		[Comment],
		[rowguid],
		[ModifiedDate]
	FROM [Sales].[SalesOrderHeader]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SalesOrderHeader_Insert]') IS NOT NULL DROP PROCEDURE [Sales].[SalesOrderHeader_Insert]
GO
CREATE PROCEDURE [Sales].[SalesOrderHeader_Insert]
(
	@RevisionNumber TINYINT,
	@OrderDate DATETIME,
	@DueDate DATETIME,
	@ShipDate DATETIME,
	@Status TINYINT,
	@OnlineOrderFlag FLAG,
	@SalesOrderNumber NVARCHAR(25),
	@PurchaseOrderNumber ORDERNUMBER,
	@AccountNumber ACCOUNTNUMBER,
	@CustomerID INT,
	@ContactID INT,
	@SalesPersonID INT,
	@TerritoryID INT,
	@BillToAddressID INT,
	@ShipToAddressID INT,
	@ShipMethodID INT,
	@CreditCardID INT,
	@CreditCardApprovalCode VARCHAR(15),
	@CurrencyRateID INT,
	@SubTotal MONEY,
	@TaxAmt MONEY,
	@Freight MONEY,
	@TotalDue MONEY,
	@Comment NVARCHAR(128),
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Sales].[SalesOrderHeader]
	(
		[RevisionNumber],
		[OrderDate],
		[DueDate],
		[ShipDate],
		[Status],
		[OnlineOrderFlag],
		[PurchaseOrderNumber],
		[AccountNumber],
		[CustomerID],
		[ContactID],
		[SalesPersonID],
		[TerritoryID],
		[BillToAddressID],
		[ShipToAddressID],
		[ShipMethodID],
		[CreditCardID],
		[CreditCardApprovalCode],
		[CurrencyRateID],
		[SubTotal],
		[TaxAmt],
		[Freight],
		[Comment],
		[rowguid],
		[ModifiedDate]
	)
	VALUES
	(
		@RevisionNumber,
		@OrderDate,
		@DueDate,
		@ShipDate,
		@Status,
		@OnlineOrderFlag,
		@PurchaseOrderNumber,
		@AccountNumber,
		@CustomerID,
		@ContactID,
		@SalesPersonID,
		@TerritoryID,
		@BillToAddressID,
		@ShipToAddressID,
		@ShipMethodID,
		@CreditCardID,
		@CreditCardApprovalCode,
		@CurrencyRateID,
		@SubTotal,
		@TaxAmt,
		@Freight,
		@Comment,
		@rowguid,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SalesOrderHeader_Update]') IS NOT NULL DROP PROCEDURE [Sales].[SalesOrderHeader_Update]
GO
CREATE PROCEDURE [Sales].[SalesOrderHeader_Update]
(
	@SalesOrderID INT,
	@RevisionNumber TINYINT,
	@OrderDate DATETIME,
	@DueDate DATETIME,
	@ShipDate DATETIME,
	@Status TINYINT,
	@OnlineOrderFlag FLAG,
	@SalesOrderNumber NVARCHAR(25),
	@PurchaseOrderNumber ORDERNUMBER,
	@AccountNumber ACCOUNTNUMBER,
	@CustomerID INT,
	@ContactID INT,
	@SalesPersonID INT,
	@TerritoryID INT,
	@BillToAddressID INT,
	@ShipToAddressID INT,
	@ShipMethodID INT,
	@CreditCardID INT,
	@CreditCardApprovalCode VARCHAR(15),
	@CurrencyRateID INT,
	@SubTotal MONEY,
	@TaxAmt MONEY,
	@Freight MONEY,
	@TotalDue MONEY,
	@Comment NVARCHAR(128),
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Sales].[SalesOrderHeader] SET
		[RevisionNumber] = @RevisionNumber,
		[OrderDate] = @OrderDate,
		[DueDate] = @DueDate,
		[ShipDate] = @ShipDate,
		[Status] = @Status,
		[OnlineOrderFlag] = @OnlineOrderFlag,
		[PurchaseOrderNumber] = @PurchaseOrderNumber,
		[AccountNumber] = @AccountNumber,
		[CustomerID] = @CustomerID,
		[ContactID] = @ContactID,
		[SalesPersonID] = @SalesPersonID,
		[TerritoryID] = @TerritoryID,
		[BillToAddressID] = @BillToAddressID,
		[ShipToAddressID] = @ShipToAddressID,
		[ShipMethodID] = @ShipMethodID,
		[CreditCardID] = @CreditCardID,
		[CreditCardApprovalCode] = @CreditCardApprovalCode,
		[CurrencyRateID] = @CurrencyRateID,
		[SubTotal] = @SubTotal,
		[TaxAmt] = @TaxAmt,
		[Freight] = @Freight,
		[Comment] = @Comment,
		[rowguid] = @rowguid,
		[ModifiedDate] = @ModifiedDate
	WHERE
		SalesOrderID = @SalesOrderID

GO



--*****************************************************************************
--	Stored procedures for [Sales].[SalesOrderHeaderSalesReason]
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SalesOrderHeaderSalesReason_List]') IS NOT NULL DROP PROCEDURE [Sales].[SalesOrderHeaderSalesReason_List]
GO
CREATE PROCEDURE [Sales].[SalesOrderHeaderSalesReason_List]
AS
	SELECT
		[SalesOrderID],
		[SalesReasonID],
		[ModifiedDate]
	FROM [Sales].[SalesOrderHeaderSalesReason]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SalesOrderHeaderSalesReason_Insert]') IS NOT NULL DROP PROCEDURE [Sales].[SalesOrderHeaderSalesReason_Insert]
GO
CREATE PROCEDURE [Sales].[SalesOrderHeaderSalesReason_Insert]
(
	@SalesOrderID INT,
	@SalesReasonID INT,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Sales].[SalesOrderHeaderSalesReason]
	(
		[SalesOrderID],
		[SalesReasonID],
		[ModifiedDate]
	)
	VALUES
	(
		@SalesOrderID,
		@SalesReasonID,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SalesOrderHeaderSalesReason_Update]') IS NOT NULL DROP PROCEDURE [Sales].[SalesOrderHeaderSalesReason_Update]
GO
CREATE PROCEDURE [Sales].[SalesOrderHeaderSalesReason_Update]
(
	@SalesOrderID INT,
	@SalesReasonID INT,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Sales].[SalesOrderHeaderSalesReason] SET
		[SalesOrderID] = @SalesOrderID,
		[SalesReasonID] = @SalesReasonID,
		[ModifiedDate] = @ModifiedDate
	WHERE
		SalesOrderID = @SalesOrderID AND
		SalesReasonID = @SalesReasonID

GO



--*****************************************************************************
--	Stored procedures for [Sales].[SalesPerson]
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SalesPerson_List]') IS NOT NULL DROP PROCEDURE [Sales].[SalesPerson_List]
GO
CREATE PROCEDURE [Sales].[SalesPerson_List]
AS
	SELECT
		[SalesPersonID],
		[TerritoryID],
		[SalesQuota],
		[Bonus],
		[CommissionPct],
		[SalesYTD],
		[SalesLastYear],
		[rowguid],
		[ModifiedDate]
	FROM [Sales].[SalesPerson]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SalesPerson_Insert]') IS NOT NULL DROP PROCEDURE [Sales].[SalesPerson_Insert]
GO
CREATE PROCEDURE [Sales].[SalesPerson_Insert]
(
	@SalesPersonID INT,
	@TerritoryID INT,
	@SalesQuota MONEY,
	@Bonus MONEY,
	@CommissionPct SMALLMONEY,
	@SalesYTD MONEY,
	@SalesLastYear MONEY,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Sales].[SalesPerson]
	(
		[SalesPersonID],
		[TerritoryID],
		[SalesQuota],
		[Bonus],
		[CommissionPct],
		[SalesYTD],
		[SalesLastYear],
		[rowguid],
		[ModifiedDate]
	)
	VALUES
	(
		@SalesPersonID,
		@TerritoryID,
		@SalesQuota,
		@Bonus,
		@CommissionPct,
		@SalesYTD,
		@SalesLastYear,
		@rowguid,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SalesPerson_Update]') IS NOT NULL DROP PROCEDURE [Sales].[SalesPerson_Update]
GO
CREATE PROCEDURE [Sales].[SalesPerson_Update]
(
	@SalesPersonID INT,
	@TerritoryID INT,
	@SalesQuota MONEY,
	@Bonus MONEY,
	@CommissionPct SMALLMONEY,
	@SalesYTD MONEY,
	@SalesLastYear MONEY,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Sales].[SalesPerson] SET
		[SalesPersonID] = @SalesPersonID,
		[TerritoryID] = @TerritoryID,
		[SalesQuota] = @SalesQuota,
		[Bonus] = @Bonus,
		[CommissionPct] = @CommissionPct,
		[SalesYTD] = @SalesYTD,
		[SalesLastYear] = @SalesLastYear,
		[rowguid] = @rowguid,
		[ModifiedDate] = @ModifiedDate
	WHERE
		SalesPersonID = @SalesPersonID

GO



--*****************************************************************************
--	Stored procedures for [Sales].[SalesPersonQuotaHistory]
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SalesPersonQuotaHistory_List]') IS NOT NULL DROP PROCEDURE [Sales].[SalesPersonQuotaHistory_List]
GO
CREATE PROCEDURE [Sales].[SalesPersonQuotaHistory_List]
AS
	SELECT
		[SalesPersonID],
		[QuotaDate],
		[SalesQuota],
		[rowguid],
		[ModifiedDate]
	FROM [Sales].[SalesPersonQuotaHistory]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SalesPersonQuotaHistory_Insert]') IS NOT NULL DROP PROCEDURE [Sales].[SalesPersonQuotaHistory_Insert]
GO
CREATE PROCEDURE [Sales].[SalesPersonQuotaHistory_Insert]
(
	@SalesPersonID INT,
	@QuotaDate DATETIME,
	@SalesQuota MONEY,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Sales].[SalesPersonQuotaHistory]
	(
		[SalesPersonID],
		[QuotaDate],
		[SalesQuota],
		[rowguid],
		[ModifiedDate]
	)
	VALUES
	(
		@SalesPersonID,
		@QuotaDate,
		@SalesQuota,
		@rowguid,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SalesPersonQuotaHistory_Update]') IS NOT NULL DROP PROCEDURE [Sales].[SalesPersonQuotaHistory_Update]
GO
CREATE PROCEDURE [Sales].[SalesPersonQuotaHistory_Update]
(
	@SalesPersonID INT,
	@QuotaDate DATETIME,
	@SalesQuota MONEY,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Sales].[SalesPersonQuotaHistory] SET
		[SalesPersonID] = @SalesPersonID,
		[QuotaDate] = @QuotaDate,
		[SalesQuota] = @SalesQuota,
		[rowguid] = @rowguid,
		[ModifiedDate] = @ModifiedDate
	WHERE
		SalesPersonID = @SalesPersonID AND
		QuotaDate = @QuotaDate

GO



--*****************************************************************************
--	Stored procedures for [Sales].[SalesReason]
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SalesReason_List]') IS NOT NULL DROP PROCEDURE [Sales].[SalesReason_List]
GO
CREATE PROCEDURE [Sales].[SalesReason_List]
AS
	SELECT
		[SalesReasonID],
		[Name],
		[ReasonType],
		[ModifiedDate]
	FROM [Sales].[SalesReason]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SalesReason_Insert]') IS NOT NULL DROP PROCEDURE [Sales].[SalesReason_Insert]
GO
CREATE PROCEDURE [Sales].[SalesReason_Insert]
(
	@Name NAME,
	@ReasonType NAME,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Sales].[SalesReason]
	(
		[Name],
		[ReasonType],
		[ModifiedDate]
	)
	VALUES
	(
		@Name,
		@ReasonType,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SalesReason_Update]') IS NOT NULL DROP PROCEDURE [Sales].[SalesReason_Update]
GO
CREATE PROCEDURE [Sales].[SalesReason_Update]
(
	@SalesReasonID INT,
	@Name NAME,
	@ReasonType NAME,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Sales].[SalesReason] SET
		[Name] = @Name,
		[ReasonType] = @ReasonType,
		[ModifiedDate] = @ModifiedDate
	WHERE
		SalesReasonID = @SalesReasonID

GO



--*****************************************************************************
--	Stored procedures for [Sales].[SalesTaxRate]
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SalesTaxRate_List]') IS NOT NULL DROP PROCEDURE [Sales].[SalesTaxRate_List]
GO
CREATE PROCEDURE [Sales].[SalesTaxRate_List]
AS
	SELECT
		[SalesTaxRateID],
		[StateProvinceID],
		[TaxType],
		[TaxRate],
		[Name],
		[rowguid],
		[ModifiedDate]
	FROM [Sales].[SalesTaxRate]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SalesTaxRate_Insert]') IS NOT NULL DROP PROCEDURE [Sales].[SalesTaxRate_Insert]
GO
CREATE PROCEDURE [Sales].[SalesTaxRate_Insert]
(
	@StateProvinceID INT,
	@TaxType TINYINT,
	@TaxRate SMALLMONEY,
	@Name NAME,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Sales].[SalesTaxRate]
	(
		[StateProvinceID],
		[TaxType],
		[TaxRate],
		[Name],
		[rowguid],
		[ModifiedDate]
	)
	VALUES
	(
		@StateProvinceID,
		@TaxType,
		@TaxRate,
		@Name,
		@rowguid,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SalesTaxRate_Update]') IS NOT NULL DROP PROCEDURE [Sales].[SalesTaxRate_Update]
GO
CREATE PROCEDURE [Sales].[SalesTaxRate_Update]
(
	@SalesTaxRateID INT,
	@StateProvinceID INT,
	@TaxType TINYINT,
	@TaxRate SMALLMONEY,
	@Name NAME,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Sales].[SalesTaxRate] SET
		[StateProvinceID] = @StateProvinceID,
		[TaxType] = @TaxType,
		[TaxRate] = @TaxRate,
		[Name] = @Name,
		[rowguid] = @rowguid,
		[ModifiedDate] = @ModifiedDate
	WHERE
		SalesTaxRateID = @SalesTaxRateID

GO



--*****************************************************************************
--	Stored procedures for [Sales].[SalesTerritory]
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SalesTerritory_List]') IS NOT NULL DROP PROCEDURE [Sales].[SalesTerritory_List]
GO
CREATE PROCEDURE [Sales].[SalesTerritory_List]
AS
	SELECT
		[TerritoryID],
		[Name],
		[CountryRegionCode],
		[Group],
		[SalesYTD],
		[SalesLastYear],
		[CostYTD],
		[CostLastYear],
		[rowguid],
		[ModifiedDate]
	FROM [Sales].[SalesTerritory]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SalesTerritory_Insert]') IS NOT NULL DROP PROCEDURE [Sales].[SalesTerritory_Insert]
GO
CREATE PROCEDURE [Sales].[SalesTerritory_Insert]
(
	@Name NAME,
	@CountryRegionCode NVARCHAR(3),
	@Group NVARCHAR(50),
	@SalesYTD MONEY,
	@SalesLastYear MONEY,
	@CostYTD MONEY,
	@CostLastYear MONEY,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Sales].[SalesTerritory]
	(
		[Name],
		[CountryRegionCode],
		[Group],
		[SalesYTD],
		[SalesLastYear],
		[CostYTD],
		[CostLastYear],
		[rowguid],
		[ModifiedDate]
	)
	VALUES
	(
		@Name,
		@CountryRegionCode,
		@Group,
		@SalesYTD,
		@SalesLastYear,
		@CostYTD,
		@CostLastYear,
		@rowguid,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SalesTerritory_Update]') IS NOT NULL DROP PROCEDURE [Sales].[SalesTerritory_Update]
GO
CREATE PROCEDURE [Sales].[SalesTerritory_Update]
(
	@TerritoryID INT,
	@Name NAME,
	@CountryRegionCode NVARCHAR(3),
	@Group NVARCHAR(50),
	@SalesYTD MONEY,
	@SalesLastYear MONEY,
	@CostYTD MONEY,
	@CostLastYear MONEY,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Sales].[SalesTerritory] SET
		[Name] = @Name,
		[CountryRegionCode] = @CountryRegionCode,
		[Group] = @Group,
		[SalesYTD] = @SalesYTD,
		[SalesLastYear] = @SalesLastYear,
		[CostYTD] = @CostYTD,
		[CostLastYear] = @CostLastYear,
		[rowguid] = @rowguid,
		[ModifiedDate] = @ModifiedDate
	WHERE
		TerritoryID = @TerritoryID

GO



--*****************************************************************************
--	Stored procedures for [Sales].[SalesTerritoryHistory]
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SalesTerritoryHistory_List]') IS NOT NULL DROP PROCEDURE [Sales].[SalesTerritoryHistory_List]
GO
CREATE PROCEDURE [Sales].[SalesTerritoryHistory_List]
AS
	SELECT
		[SalesPersonID],
		[TerritoryID],
		[StartDate],
		[EndDate],
		[rowguid],
		[ModifiedDate]
	FROM [Sales].[SalesTerritoryHistory]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SalesTerritoryHistory_Insert]') IS NOT NULL DROP PROCEDURE [Sales].[SalesTerritoryHistory_Insert]
GO
CREATE PROCEDURE [Sales].[SalesTerritoryHistory_Insert]
(
	@SalesPersonID INT,
	@TerritoryID INT,
	@StartDate DATETIME,
	@EndDate DATETIME,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Sales].[SalesTerritoryHistory]
	(
		[SalesPersonID],
		[TerritoryID],
		[StartDate],
		[EndDate],
		[rowguid],
		[ModifiedDate]
	)
	VALUES
	(
		@SalesPersonID,
		@TerritoryID,
		@StartDate,
		@EndDate,
		@rowguid,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SalesTerritoryHistory_Update]') IS NOT NULL DROP PROCEDURE [Sales].[SalesTerritoryHistory_Update]
GO
CREATE PROCEDURE [Sales].[SalesTerritoryHistory_Update]
(
	@SalesPersonID INT,
	@TerritoryID INT,
	@StartDate DATETIME,
	@EndDate DATETIME,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Sales].[SalesTerritoryHistory] SET
		[SalesPersonID] = @SalesPersonID,
		[TerritoryID] = @TerritoryID,
		[StartDate] = @StartDate,
		[EndDate] = @EndDate,
		[rowguid] = @rowguid,
		[ModifiedDate] = @ModifiedDate
	WHERE
		SalesPersonID = @SalesPersonID AND
		TerritoryID = @TerritoryID AND
		StartDate = @StartDate

GO



--*****************************************************************************
--	Stored procedures for [Sales].[ShoppingCartItem]
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[ShoppingCartItem_List]') IS NOT NULL DROP PROCEDURE [Sales].[ShoppingCartItem_List]
GO
CREATE PROCEDURE [Sales].[ShoppingCartItem_List]
AS
	SELECT
		[ShoppingCartItemID],
		[ShoppingCartID],
		[Quantity],
		[ProductID],
		[DateCreated],
		[ModifiedDate]
	FROM [Sales].[ShoppingCartItem]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[ShoppingCartItem_Insert]') IS NOT NULL DROP PROCEDURE [Sales].[ShoppingCartItem_Insert]
GO
CREATE PROCEDURE [Sales].[ShoppingCartItem_Insert]
(
	@ShoppingCartID NVARCHAR(50),
	@Quantity INT,
	@ProductID INT,
	@DateCreated DATETIME,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Sales].[ShoppingCartItem]
	(
		[ShoppingCartID],
		[Quantity],
		[ProductID],
		[DateCreated],
		[ModifiedDate]
	)
	VALUES
	(
		@ShoppingCartID,
		@Quantity,
		@ProductID,
		@DateCreated,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[ShoppingCartItem_Update]') IS NOT NULL DROP PROCEDURE [Sales].[ShoppingCartItem_Update]
GO
CREATE PROCEDURE [Sales].[ShoppingCartItem_Update]
(
	@ShoppingCartItemID INT,
	@ShoppingCartID NVARCHAR(50),
	@Quantity INT,
	@ProductID INT,
	@DateCreated DATETIME,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Sales].[ShoppingCartItem] SET
		[ShoppingCartID] = @ShoppingCartID,
		[Quantity] = @Quantity,
		[ProductID] = @ProductID,
		[DateCreated] = @DateCreated,
		[ModifiedDate] = @ModifiedDate
	WHERE
		ShoppingCartItemID = @ShoppingCartItemID

GO



--*****************************************************************************
--	Stored procedures for [Sales].[SpecialOffer]
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SpecialOffer_List]') IS NOT NULL DROP PROCEDURE [Sales].[SpecialOffer_List]
GO
CREATE PROCEDURE [Sales].[SpecialOffer_List]
AS
	SELECT
		[SpecialOfferID],
		[Description],
		[DiscountPct],
		[Type],
		[Category],
		[StartDate],
		[EndDate],
		[MinQty],
		[MaxQty],
		[rowguid],
		[ModifiedDate]
	FROM [Sales].[SpecialOffer]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SpecialOffer_Insert]') IS NOT NULL DROP PROCEDURE [Sales].[SpecialOffer_Insert]
GO
CREATE PROCEDURE [Sales].[SpecialOffer_Insert]
(
	@Description NVARCHAR(255),
	@DiscountPct SMALLMONEY,
	@Type NVARCHAR(50),
	@Category NVARCHAR(50),
	@StartDate DATETIME,
	@EndDate DATETIME,
	@MinQty INT,
	@MaxQty INT,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Sales].[SpecialOffer]
	(
		[Description],
		[DiscountPct],
		[Type],
		[Category],
		[StartDate],
		[EndDate],
		[MinQty],
		[MaxQty],
		[rowguid],
		[ModifiedDate]
	)
	VALUES
	(
		@Description,
		@DiscountPct,
		@Type,
		@Category,
		@StartDate,
		@EndDate,
		@MinQty,
		@MaxQty,
		@rowguid,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SpecialOffer_Update]') IS NOT NULL DROP PROCEDURE [Sales].[SpecialOffer_Update]
GO
CREATE PROCEDURE [Sales].[SpecialOffer_Update]
(
	@SpecialOfferID INT,
	@Description NVARCHAR(255),
	@DiscountPct SMALLMONEY,
	@Type NVARCHAR(50),
	@Category NVARCHAR(50),
	@StartDate DATETIME,
	@EndDate DATETIME,
	@MinQty INT,
	@MaxQty INT,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Sales].[SpecialOffer] SET
		[Description] = @Description,
		[DiscountPct] = @DiscountPct,
		[Type] = @Type,
		[Category] = @Category,
		[StartDate] = @StartDate,
		[EndDate] = @EndDate,
		[MinQty] = @MinQty,
		[MaxQty] = @MaxQty,
		[rowguid] = @rowguid,
		[ModifiedDate] = @ModifiedDate
	WHERE
		SpecialOfferID = @SpecialOfferID

GO



--*****************************************************************************
--	Stored procedures for [Sales].[SpecialOfferProduct]
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SpecialOfferProduct_List]') IS NOT NULL DROP PROCEDURE [Sales].[SpecialOfferProduct_List]
GO
CREATE PROCEDURE [Sales].[SpecialOfferProduct_List]
AS
	SELECT
		[SpecialOfferID],
		[ProductID],
		[rowguid],
		[ModifiedDate]
	FROM [Sales].[SpecialOfferProduct]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SpecialOfferProduct_Insert]') IS NOT NULL DROP PROCEDURE [Sales].[SpecialOfferProduct_Insert]
GO
CREATE PROCEDURE [Sales].[SpecialOfferProduct_Insert]
(
	@SpecialOfferID INT,
	@ProductID INT,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Sales].[SpecialOfferProduct]
	(
		[SpecialOfferID],
		[ProductID],
		[rowguid],
		[ModifiedDate]
	)
	VALUES
	(
		@SpecialOfferID,
		@ProductID,
		@rowguid,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[SpecialOfferProduct_Update]') IS NOT NULL DROP PROCEDURE [Sales].[SpecialOfferProduct_Update]
GO
CREATE PROCEDURE [Sales].[SpecialOfferProduct_Update]
(
	@SpecialOfferID INT,
	@ProductID INT,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Sales].[SpecialOfferProduct] SET
		[SpecialOfferID] = @SpecialOfferID,
		[ProductID] = @ProductID,
		[rowguid] = @rowguid,
		[ModifiedDate] = @ModifiedDate
	WHERE
		SpecialOfferID = @SpecialOfferID AND
		ProductID = @ProductID

GO



--*****************************************************************************
--	Stored procedures for [Sales].[Store]
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[Store_List]') IS NOT NULL DROP PROCEDURE [Sales].[Store_List]
GO
CREATE PROCEDURE [Sales].[Store_List]
AS
	SELECT
		[CustomerID],
		[Name],
		[SalesPersonID],
		[Demographics],
		[rowguid],
		[ModifiedDate]
	FROM [Sales].[Store]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[Store_Insert]') IS NOT NULL DROP PROCEDURE [Sales].[Store_Insert]
GO
CREATE PROCEDURE [Sales].[Store_Insert]
(
	@CustomerID INT,
	@Name NAME,
	@SalesPersonID INT,
	@Demographics XML,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Sales].[Store]
	(
		[CustomerID],
		[Name],
		[SalesPersonID],
		[Demographics],
		[rowguid],
		[ModifiedDate]
	)
	VALUES
	(
		@CustomerID,
		@Name,
		@SalesPersonID,
		@Demographics,
		@rowguid,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[Store_Update]') IS NOT NULL DROP PROCEDURE [Sales].[Store_Update]
GO
CREATE PROCEDURE [Sales].[Store_Update]
(
	@CustomerID INT,
	@Name NAME,
	@SalesPersonID INT,
	@Demographics XML,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Sales].[Store] SET
		[CustomerID] = @CustomerID,
		[Name] = @Name,
		[SalesPersonID] = @SalesPersonID,
		[Demographics] = @Demographics,
		[rowguid] = @rowguid,
		[ModifiedDate] = @ModifiedDate
	WHERE
		CustomerID = @CustomerID

GO



--*****************************************************************************
--	Stored procedures for [Sales].[StoreContact]
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[StoreContact_List]') IS NOT NULL DROP PROCEDURE [Sales].[StoreContact_List]
GO
CREATE PROCEDURE [Sales].[StoreContact_List]
AS
	SELECT
		[CustomerID],
		[ContactID],
		[ContactTypeID],
		[rowguid],
		[ModifiedDate]
	FROM [Sales].[StoreContact]

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[StoreContact_Insert]') IS NOT NULL DROP PROCEDURE [Sales].[StoreContact_Insert]
GO
CREATE PROCEDURE [Sales].[StoreContact_Insert]
(
	@CustomerID INT,
	@ContactID INT,
	@ContactTypeID INT,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	INSERT INTO [Sales].[StoreContact]
	(
		[CustomerID],
		[ContactID],
		[ContactTypeID],
		[rowguid],
		[ModifiedDate]
	)
	VALUES
	(
		@CustomerID,
		@ContactID,
		@ContactTypeID,
		@rowguid,
		@ModifiedDate
	)
	SET NOCOUNT OFF
	SELECT SCOPE_IDENTITY() AS NewIdentity

GO
--*****************************************************************************
 
IF OBJECT_ID('[Sales].[StoreContact_Update]') IS NOT NULL DROP PROCEDURE [Sales].[StoreContact_Update]
GO
CREATE PROCEDURE [Sales].[StoreContact_Update]
(
	@CustomerID INT,
	@ContactID INT,
	@ContactTypeID INT,
	@rowguid UNIQUEIDENTIFIER,
	@ModifiedDate DATETIME
)
AS
	SET NOCOUNT ON
	UPDATE [Sales].[StoreContact] SET
		[CustomerID] = @CustomerID,
		[ContactID] = @ContactID,
		[ContactTypeID] = @ContactTypeID,
		[rowguid] = @rowguid,
		[ModifiedDate] = @ModifiedDate
	WHERE
		CustomerID = @CustomerID AND
		ContactID = @ContactID

GO
